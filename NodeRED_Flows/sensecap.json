[
    {
        "id": "aa6df6911dd8c2ce",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 6",
        "func": "// Ensure payload structure is valid\nif (msg.payload && msg.payload.PayloadData && msg.payload.WirelessMetadata && msg.payload.WirelessMetadata.LoRaWAN) {\n    try {\n        // Decode the PayloadData from Base64 to hex\n        let rawPayload = Buffer.from(msg.payload.PayloadData, 'base64').toString('hex');\n        msg.payload.rawPayload = rawPayload;\n\n        // Extract DevEui\n        let devEui = msg.payload.WirelessMetadata.LoRaWAN.DevEui;\n        msg.payload.devEui = devEui;\n\n        node.warn(`Decoded PayloadData: ${rawPayload}`);\n        node.warn(`DevEui: ${devEui}`);\n        return msg; // Pass the message along\n    } catch (error) {\n        node.error(\"Error decoding PayloadData: \" + error.message);\n        return null; // Stop further processing\n    }\n} else {\n    node.error(\"PayloadData or WirelessMetadata is missing or invalid.\");\n    return null; // Stop further processing\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [
            [
                "4bcfe6a39435e0d0",
                "7c755697cee76bee"
            ]
        ]
    },
    {
        "id": "4bcfe6a39435e0d0",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 100,
        "wires": []
    },
    {
        "id": "7c755697cee76bee",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 7",
        "func": "if (msg.payload && msg.payload.rawPayload && msg.payload.devEui === \"2cf7f1c044900188\") {\n    try {\n        let rawPayload = Buffer.from(msg.payload.rawPayload, 'hex');\n\n        // Log the payload length for debugging\n        node.warn(`Payload Length: ${rawPayload.length}, Payload: ${rawPayload.toString('hex')}`);\n\n        // Define valid payload length for decoding\n        const VALID_LENGTH = 11;\n\n        // Check payload length\n        if (rawPayload.length !== VALID_LENGTH) {\n            node.warn(`Ignoring payload with invalid length (${rawPayload.length}): ${rawPayload.toString('hex')}`);\n            return null;\n        }\n\n        // Decode temperature (offset 5)\n        let tempRaw = rawPayload.readUInt16BE(5);\n        let decodedTemp = tempRaw / 1000.0;\n\n        // Decode humidity (offset 9)\n        let humRaw = rawPayload.readUInt16BE(9);\n        let decodedHum = humRaw / 1000.0;\n\n        // Log decoded values for debugging\n        node.warn(`Decoded Temp: ${decodedTemp}, Decoded Hum: ${decodedHum}`);\n\n        // Update payload with decoded values\n        msg.payload.decodedTemp = decodedTemp;\n        msg.payload.decodedHum = decodedHum;\n\n        return msg;\n    } catch (error) {\n        node.error(\"Error decoding payload: \" + error.message);\n        return null;\n    }\n} else {\n    node.warn(\"Ignoring message from unknown or invalid source.\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "d11011baf862ba6d",
                "b2c9e96acd3f2df4",
                "a56fc1ccc3d3ed8b"
            ]
        ]
    },
    {
        "id": "d11011baf862ba6d",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "46586140170a6fe1",
        "type": "mqtt in",
        "z": "c2a858310637da2c",
        "name": "SenseCap",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "aa6df6911dd8c2ce",
                "7ab7681e01f660f2"
            ]
        ]
    },
    {
        "id": "b2c9e96acd3f2df4",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 8",
        "func": "msg.payload = msg.payload.decodedTemp\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 280,
        "wires": [
            [
                "2da3104d549a1730",
                "3304361d7b635c86",
                "b1dd9203dd91114f"
            ]
        ]
    },
    {
        "id": "a56fc1ccc3d3ed8b",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 9",
        "func": "msg.payload = msg.payload.decodedHum\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "0602ab20c5b41e56",
                "ad435ae73a80c0a6",
                "d9577518a8dd40e0"
            ]
        ]
    },
    {
        "id": "0602ab20c5b41e56",
        "type": "ui_chart",
        "z": "c2a858310637da2c",
        "name": "Humidity",
        "group": "a206d81b.bc8288",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Humidity LoraWAN AWS",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2da3104d549a1730",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 220,
        "wires": []
    },
    {
        "id": "ad435ae73a80c0a6",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "7ab7681e01f660f2",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 180,
        "wires": []
    },
    {
        "id": "d9577518a8dd40e0",
        "type": "influxdb out",
        "z": "c2a858310637da2c",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Humidity",
        "measurement": "Humidity",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 840,
        "y": 380,
        "wires": []
    },
    {
        "id": "3304361d7b635c86",
        "type": "influxdb out",
        "z": "c2a858310637da2c",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Temperature",
        "measurement": "Temperature",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 850,
        "y": 300,
        "wires": []
    },
    {
        "id": "b1dd9203dd91114f",
        "type": "ui_chart",
        "z": "c2a858310637da2c",
        "name": "Temp",
        "group": "a206d81b.bc8288",
        "order": 27,
        "width": 0,
        "height": 0,
        "label": "Temp LoraWan AWS",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1d217cdc21b925d0",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 10",
        "func": "// Ensure payload structure is valid\nif (msg.payload && msg.payload.PayloadData && msg.payload.WirelessMetadata && msg.payload.WirelessMetadata.LoRaWAN) {\n    try {\n        // Decode the PayloadData from Base64 to hex\n        let rawPayload = Buffer.from(msg.payload.PayloadData, 'base64').toString('hex');\n        msg.payload.rawPayload = rawPayload;\n\n        // Extract DevEui\n        let devEui = msg.payload.WirelessMetadata.LoRaWAN.DevEui;\n        msg.payload.devEui = devEui;\n\n        node.warn(`Decoded PayloadData: ${rawPayload}`);\n        node.warn(`DevEui: ${devEui}`);\n        return msg; // Pass the message along\n    } catch (error) {\n        node.error(\"Error decoding PayloadData: \" + error.message);\n        return null; // Stop further processing\n    }\n} else {\n    node.error(\"PayloadData or WirelessMetadata is missing or invalid.\");\n    return null; // Stop further processing\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": [
            [
                "88c27f72022a6583",
                "4ac38b01724c3963"
            ]
        ]
    },
    {
        "id": "88c27f72022a6583",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 600,
        "wires": []
    },
    {
        "id": "4ac38b01724c3963",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 11",
        "func": "if (msg.payload && msg.payload.rawPayload && msg.payload.devEui) {\n    try {\n        const validDevEui = \"2cf7f1c05300027e\"; // Replace with the DevEui of your pH sensor\n        const rawPayload = Buffer.from(msg.payload.rawPayload, 'hex');\n\n        // Validate DevEui\n        if (msg.payload.devEui.toLowerCase() !== validDevEui.toLowerCase()) {\n            node.warn(`Ignoring message from unknown DevEui: ${msg.payload.devEui}`);\n            return null;\n        }\n\n        // Check for valid payload length\n        if (rawPayload.length !== 11) { // Enforce length of 11 bytes for valid messages\n            node.warn(`Ignoring payload with invalid length (${rawPayload.length}): ${rawPayload.toString('hex')}`);\n            return null;\n        }\n\n        // Decode pH value using fixed offset 5\n        const phRaw = rawPayload.readUInt16BE(5);\n        const decodedPh = phRaw / 1000.0; // Adjust scaling for pH sensor\n\n        // Attach decoded value to payload\n        msg.payload.decodedPh = decodedPh;\n\n        return msg;\n\n    } catch (error) {\n        node.error(\"Error decoding payload: \" + error.message);\n        return null;\n    }\n} else {\n    node.error(\"Raw payload or DevEui is missing or invalid.\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 680,
        "wires": [
            [
                "a8b3299e50188408",
                "67a428201dd4666f"
            ]
        ]
    },
    {
        "id": "a8b3299e50188408",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 680,
        "wires": []
    },
    {
        "id": "8125ba4dbefb4fe4",
        "type": "mqtt in",
        "z": "c2a858310637da2c",
        "name": "SenseCap",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "b7b7292ec88ec8e7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 680,
        "wires": [
            [
                "1d217cdc21b925d0"
            ]
        ]
    },
    {
        "id": "67a428201dd4666f",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 12",
        "func": "msg.payload = msg.payload.decodedPh\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 780,
        "wires": [
            [
                "193af9b7607362f4",
                "89d4bd216d4ba07c",
                "7af12b825150505e"
            ]
        ]
    },
    {
        "id": "193af9b7607362f4",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 740,
        "wires": []
    },
    {
        "id": "89d4bd216d4ba07c",
        "type": "influxdb out",
        "z": "c2a858310637da2c",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Ph",
        "measurement": "Ph",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 810,
        "y": 820,
        "wires": []
    },
    {
        "id": "7af12b825150505e",
        "type": "ui_chart",
        "z": "c2a858310637da2c",
        "name": "pH",
        "group": "a206d81b.bc8288",
        "order": 29,
        "width": 0,
        "height": 0,
        "label": "pH LoraWan  AWS",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "64b04872b5f80a02",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "ba109cb67c9091ac",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "3",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a206d81b.bc8288",
        "type": "ui_group",
        "name": "Home",
        "tab": "9b2d0bab.ce1568",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "472e17de7ee4e7eb",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sensors",
        "name": "sensor readings",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "b7b7292ec88ec8e7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "6b827b760a08fa96",
        "clientid": "AWS_DHT11",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": false,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ba109cb67c9091ac",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "a0d250207d9ca20bb5a8b87416dda5c595b7150ac260b6221d1b8cdc2460404d-certificate.pem.crt",
        "keyname": "a0d250207d9ca20bb5a8b87416dda5c595b7150ac260b6221d1b8cdc2460404d-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "9b2d0bab.ce1568",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard"
    },
    {
        "id": "6b827b760a08fa96",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-certificate.pem.crt",
        "keyname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    }
]