
[
    {
        "id": "d84a1fed85ca3d68",
        "type": "mqtt in",
        "z": "3eb223b4b2c18a36",
        "name": "Energy Monitor",
        "topic": "esp32/energy_meter",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "8c8f1548d5205ea0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "f6c238f8c5121818",
                "bed20e973f40a51f"
            ]
        ]
    },
    {
        "id": "f6c238f8c5121818",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "MQTT Input",
        "func": "// Retrieve previously stored values (if any) from context\nlet current1 = context.get('current1') || null;\nlet current2 = context.get('current2') || null;\nlet power1 = context.get('power1') || null;\nlet power2 = context.get('power2') || null;\nlet energy1 = context.get('energy1') || null;\nlet energy2 = context.get('energy2') || null;\nlet timestamp1 = context.get('timestamp1') || null;\nlet timestamp2 = context.get('timestamp2') || null;\n\n// Get the current timestamp\nlet currentTimestamp = Date.now();\n\n// Check the meter address and store the respective values\nif (msg.payload.meter_address === 1) {\n    current1 = msg.payload.current;\n    power1 = msg.payload.power;\n    energy1 = msg.payload.energy;\n    timestamp1 = currentTimestamp; // Store timestamp for meter 1\n    context.set('current1', current1);\n    context.set('power1', power1);\n    context.set('energy1', energy1);\n    context.set('timestamp1', timestamp1);\n    node.warn(\"Stored values from meter 1 - Current: \" + current1 + \", Power: \" + power1 + \", Energy: \" + energy1);\n} else if (msg.payload.meter_address === 2) {\n    current2 = msg.payload.current;\n    power2 = msg.payload.power;\n    energy2 = msg.payload.energy;\n    timestamp2 = currentTimestamp; // Store timestamp for meter 2\n    context.set('current2', current2);\n    context.set('power2', power2);\n    context.set('energy2', energy2);\n    context.set('timestamp2', timestamp2);\n    node.warn(\"Stored values from meter 2 - Current: \" + current2 + \", Power: \" + power2 + \", Energy: \" + energy2);\n}\n\n// Check if all values are available for both meters\nif (current1 !== null && current2 !== null && power1 !== null && power2 !== null && energy1 !== null && energy2 !== null) {\n    // Calculate total current, power, and energy\n    let totalCurrent = current1 + current2;\n    let totalPower = power1 + power2;\n    let totalEnergy = energy1 + energy2;\n\n    // Calculate the average timestamp for the two meters\n    let averageTimestamp = (timestamp1 + timestamp2) / 2;\n\n    // Prepare the output message\n    msg.payload = {\n        totalCurrent: totalCurrent,\n        totalPower: totalPower,\n        totalEnergy: totalEnergy,\n        timestamp: averageTimestamp // Include the average timestamp in the output\n    };\n\n    // Clear stored values after computation\n    context.set('current1', null);\n    context.set('current2', null);\n    context.set('power1', null);\n    context.set('power2', null);\n    context.set('energy1', null);\n    context.set('energy2', null);\n    context.set('timestamp1', null);\n    context.set('timestamp2', null);\n\n    // Log the output for debugging\n    node.warn(\"Outputting total values: \" + JSON.stringify(msg.payload));\n\n    return msg;\n}\n\n// Log if not all values are received yet\nnode.warn(\"Waiting for all meter data to be received...\");\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "366983f4fd0b645f",
                "6d58050f0a1f4d08",
                "6a5a64cd1a50140a",
                "ff82b590d4a2a259",
                "e47159f8a0f3aec3"
            ]
        ]
    },
    {
        "id": "bed20e973f40a51f",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 100,
        "wires": []
    },
    {
        "id": "366983f4fd0b645f",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "6d58050f0a1f4d08",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "Average Power Calculation",
        "func": "let currentKWh = msg.payload.totalEnergy;  // Energy in kWh (scaled in Arduino)\nlet currentTime = msg.payload.timestamp;\n\n// Retrieve previously stored values\nlet previousKWh = context.get(\"previousKWh\");\nlet previousTime = context.get(\"previousTime\");\n\n// If this is the first run, initialize previous values\nif (previousKWh === undefined || previousTime === undefined) {\n    node.warn(\"First cycle: Initializing previousKWh and previousTime.\");\n    context.set(\"previousKWh\", currentKWh);\n    context.set(\"previousTime\", currentTime);\n    return null;  // Skip calculation on the first run\n}\n\n// Calculate time difference in hours\nlet timeDifference = (currentTime - previousTime) / (1000 * 3600);  // Convert ms to hours\nif (timeDifference <= 0) {\n    node.warn(\"Invalid time difference. Skipping average power calculation.\");\n    return null;\n}\n\n// Calculate average power in Watts\nlet energyDifference = currentKWh - previousKWh;  // Energy difference in kWh\nlet averagePowerW = energyDifference / timeDifference * 1000;  // Power in Watts\n\n// Update context for the next cycle\ncontext.set(\"previousKWh\", currentKWh);\ncontext.set(\"previousTime\", currentTime);\n\n// Output the average power in Watts\nmsg.payload = {\n    averagePowerW: parseFloat(averagePowerW.toFixed(3)),  // Retain 3 decimals for Watts\n    currentKWh: currentKWh,\n    previousKWh: previousKWh,\n    timeDifference: timeDifference\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "73ca1c8fe4981402",
                "3046c6e76a3578f5"
            ]
        ]
    },
    {
        "id": "73ca1c8fe4981402",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 180,
        "wires": []
    },
    {
        "id": "3046c6e76a3578f5",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "Average Power Chart",
        "func": "msg.payload = msg.payload.averagePowerW;  // Extract average power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 340,
        "wires": [
            [
                "a52b631e9983c425",
                "730938280f0e8085"
            ]
        ]
    },
    {
        "id": "a52b631e9983c425",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Average Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9838744108786c4d",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Current Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 600,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "6a5a64cd1a50140a",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "total power",
        "func": "msg.payload = msg.payload.totalPower;  // Extract total power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "9838744108786c4d"
            ]
        ]
    },
    {
        "id": "ff82b590d4a2a259",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 16",
        "func": "msg.payload = msg.payload.totalEnergy;  // Extract average power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "d1bc7094a5769fef"
            ]
        ]
    },
    {
        "id": "d1bc7094a5769fef",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Total Energy",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "e47159f8a0f3aec3",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "Energy Totals",
        "func": "// Configuration\nconst ENERGY_RATE = 0.18; // Cost per kWh in dollars\nconst TIMEZONE_OFFSET_HOURS = -5; // Eastern Time is UTC-5\n\n// Retrieve stored values from context\nlet startOfDayEnergy = context.get('startOfDayEnergy');\nlet startOfMonthEnergy = context.get('startOfMonthEnergy');\nlet previousTotalEnergy = context.get('previousTotalEnergy') || 0;\nlet lastDay = context.get('lastDay');\nlet lastMonth = context.get('lastMonth');\n\n// Get the current timestamp\nlet now = new Date();\nlet utcHours = now.getUTCHours();\nlet utcDay = now.getUTCDate();\nlet utcMonth = now.getUTCMonth();\n\n// Calculate Eastern Time (ET) day and month\nlet etHours = utcHours + TIMEZONE_OFFSET_HOURS;\nlet etDay = utcDay;\nlet etMonth = utcMonth;\n\n// Adjust ET day and month for timezone shifts\nif (etHours < 0) {\n    etHours += 24;\n    etDay -= 1;\n} else if (etHours >= 24) {\n    etHours -= 24;\n    etDay += 1;\n}\n\nif (etDay < 1) {\n    etMonth -= 1;\n    etDay = new Date(now.getUTCFullYear(), etMonth + 1, 0).getDate();\n} else if (etDay > new Date(now.getUTCFullYear(), etMonth + 1, 0).getDate()) {\n    etMonth += 1;\n    etDay = 1;\n}\n\n// Retrieve the total energy from the MQTT message\nlet totalEnergy = msg.payload.totalEnergy; // Total cumulative energy in kWh\n\n// Initialize start-of-day and start-of-month values if missing\nif (startOfDayEnergy === undefined || lastDay === undefined) {\n    startOfDayEnergy = totalEnergy;\n    lastDay = etDay;\n    context.set('startOfDayEnergy', startOfDayEnergy);\n    context.set('lastDay', lastDay);\n    node.warn(\"Initialized start-of-day energy.\");\n}\n\nif (startOfMonthEnergy === undefined || lastMonth === undefined) {\n    startOfMonthEnergy = totalEnergy;\n    lastMonth = etMonth;\n    context.set('startOfMonthEnergy', startOfMonthEnergy);\n    context.set('lastMonth', lastMonth);\n    node.warn(\"Initialized start-of-month energy.\");\n}\n\n// Check for a new day and reset daily energy\nif (etDay !== lastDay) {\n    startOfDayEnergy = totalEnergy; // Reset start of day\n    lastDay = etDay;\n    context.set('startOfDayEnergy', startOfDayEnergy);\n    context.set('lastDay', lastDay);\n    node.warn(`New day detected. Resetting start-of-day energy to: ${startOfDayEnergy}`);\n}\n\n// Check for a new month and reset monthly energy\nif (etMonth !== lastMonth) {\n    startOfMonthEnergy = totalEnergy; // Reset start of month\n    lastMonth = etMonth;\n    context.set('startOfMonthEnergy', startOfMonthEnergy);\n    context.set('lastMonth', lastMonth);\n    node.warn(`New month detected. Resetting start-of-month energy to: ${startOfMonthEnergy}`);\n}\n\n// Calculate daily and monthly energy usage\nlet dailyEnergy = totalEnergy - startOfDayEnergy;\nlet monthlyEnergy = totalEnergy - startOfMonthEnergy;\n\n// Ensure no negative values due to resets\nif (dailyEnergy < 0) {\n    node.warn(\"Negative daily energy detected. Resetting to 0.\");\n    dailyEnergy = 0;\n}\n\nif (monthlyEnergy < 0) {\n    node.warn(\"Negative monthly energy detected. Resetting to 0.\");\n    monthlyEnergy = 0;\n}\n\n// Update the previous total energy for monthly calculations\nlet energyDifference = totalEnergy - previousTotalEnergy;\nif (energyDifference < 0) {\n    node.warn(\"Energy difference is negative. Ignoring this update.\");\n    energyDifference = 0;\n}\ncontext.set('previousTotalEnergy', totalEnergy);\n\n// Calculate monthly cost\nlet monthlyCost = monthlyEnergy * ENERGY_RATE;\n\n// Save updated values to context\ncontext.set('dailyEnergy', dailyEnergy);\ncontext.set('monthlyEnergy', monthlyEnergy);\n\n// Output results\nmsg.payload = {\n    dailyEnergy: parseFloat(dailyEnergy.toFixed(3)), // Retain 3 decimals for kWh\n    monthlyEnergy: parseFloat(monthlyEnergy.toFixed(3)), // Retain 3 decimals for kWh\n    monthlyCost: parseFloat(monthlyCost.toFixed(2)), // Retain 2 decimals for cost\n    timestampET: `${etDay}/${etMonth + 1} ${etHours}:${now.getUTCMinutes().toString().padStart(2, '0')}`\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "9ff68cfd86ee1d4a",
                "3de4a8d87064d62e",
                "2f830a23c46ba278"
            ]
        ]
    },
    {
        "id": "9ff68cfd86ee1d4a",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 17",
        "func": "msg.payload = msg.payload.dailyEnergy;  \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 620,
        "wires": [
            [
                "0cd3aad1f08507e9",
                "87d98865493e4bbd",
                "416f05dbea2d4248"
            ]
        ]
    },
    {
        "id": "3de4a8d87064d62e",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 18",
        "func": "msg.payload = msg.payload.monthlyEnergy;  // Extract average power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "610c4147e508dd3e",
                "2e070e1beddedf62"
            ]
        ]
    },
    {
        "id": "2f830a23c46ba278",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 19",
        "func": "msg.payload = msg.payload.monthlyCost;  \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 740,
        "wires": [
            [
                "7ce05717135fc812",
                "27020bb429cd6f8a"
            ]
        ]
    },
    {
        "id": "0cd3aad1f08507e9",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Daily Energy",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "610c4147e508dd3e",
        "type": "ui_text",
        "z": "3eb223b4b2c18a36",
        "group": "1d800e36fbc4ac7b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Monthly Energy",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 680,
        "wires": []
    },
    {
        "id": "7ce05717135fc812",
        "type": "ui_text",
        "z": "3eb223b4b2c18a36",
        "group": "1d800e36fbc4ac7b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Monthly Cost",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 740,
        "wires": []
    },
    {
        "id": "87d98865493e4bbd",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "2e070e1beddedf62",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 640,
        "wires": []
    },
    {
        "id": "27020bb429cd6f8a",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 720,
        "wires": []
    },
    {
        "id": "416f05dbea2d4248",
        "type": "influxdb out",
        "z": "3eb223b4b2c18a36",
        "influxdb": "472e17de7ee4e7eb",
        "name": "daily_energy",
        "measurement": "daily_energy",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1010,
        "y": 560,
        "wires": []
    },
    {
        "id": "730938280f0e8085",
        "type": "influxdb out",
        "z": "3eb223b4b2c18a36",
        "influxdb": "472e17de7ee4e7eb",
        "name": "average_power",
        "measurement": "average_power",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1020,
        "y": 400,
        "wires": []
    },
    {
        "id": "8c8f1548d5205ea0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-2.amazonaws.com",
        "port": "8883",
        "tls": "47d2151fe8f41fd2",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1d800e36fbc4ac7b",
        "type": "ui_group",
        "name": "Energy Monitoring",
        "tab": "9b2d0bab.ce1568",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "472e17de7ee4e7eb",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sensors",
        "name": "sensor readings",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "47d2151fe8f41fd2",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "3450ab16cd331be4e53d377a4d3d2fb0fbbcd81a8b30573b02812a15da50be28-certificate.pem.crt",
        "keyname": "3450ab16cd331be4e53d377a4d3d2fb0fbbcd81a8b30573b02812a15da50be28-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "9b2d0bab.ce1568",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard"
    }
]