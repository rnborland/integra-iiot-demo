[
    {
        "id": "b52c255f2f8f8c4e",
        "type": "tab",
        "label": "GPS Tracker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "558e63b9134c7dd0",
        "type": "tab",
        "label": "CubeCell Lorawan",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b057b0147da2a46",
        "type": "tab",
        "label": "Thingspeak",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "23f403e35f4fa2ae",
        "type": "tab",
        "label": "esp32_dht11",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ea87f682ab2af7eb",
        "type": "tab",
        "label": "gas sensor/valve",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3eb223b4b2c18a36",
        "type": "tab",
        "label": "Energy Monitor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "995e9f07907fb18f",
        "type": "tab",
        "label": "SIM 7000G",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c2a858310637da2c",
        "type": "tab",
        "label": "SenseCap",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63e7003c1b5f41d1",
        "type": "tab",
        "label": "BME688",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "93e42c3ecec6d081",
        "type": "tab",
        "label": "BME688",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "481f96d21d18f9be",
        "type": "tab",
        "label": "utilityapi.com",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "flow_root",
        "type": "tab",
        "label": "UtilityAPI Interval Fetch",
        "disabled": false,
        "info": ""
    },
    {
        "id": "example-flow-id",
        "type": "tab",
        "label": "Example Flow"
    },
    {
        "id": "6b827b760a08fa96",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-certificate.pem.crt",
        "keyname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "b7b7292ec88ec8e7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "6b827b760a08fa96",
        "clientid": "AWS_DHT11",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": false,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9b2d0bab.ce1568",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard"
    },
    {
        "id": "a206d81b.bc8288",
        "type": "ui_group",
        "name": "Home",
        "tab": "9b2d0bab.ce1568",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "42b87bc9f89ece47",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a9c91b6e04749bdd",
        "type": "ui_group",
        "name": "Thingspeak",
        "tab": "9b2d0bab.ce1568",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "64adc831f0d4713d",
        "type": "ui_group",
        "name": "esp32_dht11",
        "tab": "9b2d0bab.ce1568",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e173f9dadd31eb20",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "863904fbbab338a8856d7fe9a31e6e74b2c9a33012c93eb24808e494e31e0c5a-certificate.pem.crt",
        "keyname": "863904fbbab338a8856d7fe9a31e6e74b2c9a33012c93eb24808e494e31e0c5a-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "661b41bf4940d607",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "09781dc334d90402219cc3c11ef3b9d782049de4c66447c760fdf4544a051aae-certificate.pem.crt",
        "keyname": "09781dc334-private.pem.key",
        "caname": "Root_CA.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "1d800e36fbc4ac7b",
        "type": "ui_group",
        "name": "Energy Monitoring",
        "tab": "9b2d0bab.ce1568",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "47d2151fe8f41fd2",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "3450ab16cd331be4e53d377a4d3d2fb0fbbcd81a8b30573b02812a15da50be28-certificate.pem.crt",
        "keyname": "3450ab16cd331be4e53d377a4d3d2fb0fbbcd81a8b30573b02812a15da50be28-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "1e9df2374093781d",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "dc3662437e517f0165414d99683c907c3dee08db77b4e6682407cb5884412c18-certificate.pem.crt",
        "keyname": "dc3662437e517f0165414d99683c907c3dee08db77b4e6682407cb5884412c18-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "fc4b24c98c4d64a3",
        "type": "ui_group",
        "name": "esp32_dht11",
        "tab": "9b2d0bab.ce1568",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a267c97b9ef11c20",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "e144b9e69635027e859de381e37a44d762b3a55e5cc6d5fcbb9d4c1b9a3ae104-certificate.pem.crt",
        "keyname": "e144b9e69635027e859de381e37a44d762b3a55e5cc6d5fcbb9d4c1b9a3ae104-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "5eb662c1deafc86a",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-certificate.pem.crt",
        "keyname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "b025c4b51fb35467",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "6b827b760a08fa96",
        "clientid": "Heater",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "120",
        "cleansession": false,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "29db77c22a9b63bb",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-certificate.pem.crt",
        "keyname": "6182e304b5e071c515a2fbb6fa05e53ea12fd4d6f519be3bd9c896f5e9afaed9-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "472e17de7ee4e7eb",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sensors",
        "name": "sensor readings",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "ba109cb67c9091ac",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "a0d250207d9ca20bb5a8b87416dda5c595b7150ac260b6221d1b8cdc2460404d-certificate.pem.crt",
        "keyname": "a0d250207d9ca20bb5a8b87416dda5c595b7150ac260b6221d1b8cdc2460404d-private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "64b04872b5f80a02",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "ba109cb67c9091ac",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "3",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5757ee3b16ff2e23",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-2.amazonaws.com",
        "port": "8883",
        "tls": "e173f9dadd31eb20",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0e340fc982b477a1",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-west-2.amazonaws.com",
        "port": "8883",
        "tls": "661b41bf4940d607",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8c8f1548d5205ea0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-2.amazonaws.com",
        "port": "8883",
        "tls": "47d2151fe8f41fd2",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9bc2bdeec0865a21",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-2.amazonaws.com",
        "port": "8883",
        "tls": "1e9df2374093781d",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "77451fd2a6039a7d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "a267c97b9ef11c20",
        "clientid": "bme_688",
        "autoConnect": true,
        "usetls": true,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "120",
        "cleansession": false,
        "autoUnsubscribe": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "950512cc0fb4c81f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "5eb662c1deafc86a",
        "clientid": "DHT11",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ba32f99e30dcee29",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a11jye6u63iise-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "29db77c22a9b63bb",
        "clientid": "DHT11",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "30d90d31ffe1a670",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "meters_electric",
        "name": "meters_electric",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "influxdb_connection",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "meters_electric",
        "name": "meters_electric",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "8f457fe4eb7dcbdc",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "meters_electric",
        "name": "meters_electric",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "f5_influxcfg",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "meters_electric",
        "name": "meters_electric",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "influx_cfg_meters_electric",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "meters_electric",
        "name": "meters_electric",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "sensor_readings_db",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "sensors",
        "name": "sensor_readings_db",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "4768f911b9d165df",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.uplink_message.decoded_payload.messages[0][0].measurementValue",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 600,
        "wires": []
    },
    {
        "id": "ab4555104d5c389b",
        "type": "mqtt in",
        "z": "b52c255f2f8f8c4e",
        "d": true,
        "name": "temp humidity",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "json",
        "broker": "b7b7292ec88ec8e7",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 560,
        "wires": [
            [
                "4768f911b9d165df",
                "fa3792e3c3eed14b",
                "46581a9f9835ceec",
                "49fad80460cd1096",
                "37ee59487ea46c50"
            ]
        ]
    },
    {
        "id": "fa3792e3c3eed14b",
        "type": "function",
        "z": "b52c255f2f8f8c4e",
        "name": "",
        "func": "msg.payload=msg.payload.uplink_message.decoded_payload.messages[0][0].measurementValue\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "2b3c35cfa7b64924",
                "2cb4437904b60d4c",
                "80fa5d75763f839a"
            ]
        ]
    },
    {
        "id": "46581a9f9835ceec",
        "type": "function",
        "z": "b52c255f2f8f8c4e",
        "name": "",
        "func": "//msg.payload=msg.payload.uplink_message.decoded_payload.messages[0][1].measurementValue\n//return msg;\nmsg.payload = msg.payload.uplink_message.decoded_payload.messages[0][1].measurementValue\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 900,
        "wires": [
            [
                "dff7b8b08077b3a3",
                "c0a4fc9eba324b36",
                "3cfd4facaaaf15a4"
            ]
        ]
    },
    {
        "id": "49fad80460cd1096",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.uplink_message.decoded_payload.messages[0][1].measurementValue",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 640,
        "wires": []
    },
    {
        "id": "37ee59487ea46c50",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 520,
        "wires": []
    },
    {
        "id": "2b3c35cfa7b64924",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "dff7b8b08077b3a3",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 900,
        "wires": []
    },
    {
        "id": "e6ecbc2c7c10199e",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 440,
        "wires": []
    },
    {
        "id": "67fd81fcf2d50a94",
        "type": "mqtt in",
        "z": "b52c255f2f8f8c4e",
        "d": true,
        "name": "Temp Humidity LoRa",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "b7b7292ec88ec8e7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 360,
        "wires": [
            [
                "e6ecbc2c7c10199e"
            ]
        ]
    },
    {
        "id": "ace71ece64384989",
        "type": "mqtt in",
        "z": "b52c255f2f8f8c4e",
        "name": "GPS tracker",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 1160,
        "wires": [
            [
                "gps_tracker_function",
                "5fb6c8839db8938a"
            ]
        ]
    },
    {
        "id": "5fb6c8839db8938a",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1080,
        "wires": []
    },
    {
        "id": "gps_tracker_function",
        "type": "function",
        "z": "b52c255f2f8f8c4e",
        "name": "Decode GPS Data",
        "func": "if (\n    msg.payload.WirelessMetadata &&\n    msg.payload.WirelessMetadata.LoRaWAN &&\n    msg.payload.WirelessMetadata.LoRaWAN.DevEui === \"c85a8d29c5f023a5\"\n) {\n    let decodedPayload = Buffer.from(msg.payload.PayloadData, 'base64');\n    let latitude = (decodedPayload.readIntBE(0, 3) / 10000).toFixed(5);\n    let longitude = (decodedPayload.readIntBE(3, 3) / 10000).toFixed(5);\n    let altitude = decodedPayload.readInt16BE(6);\n\n    // Construct Google Maps URL\n    let googleMapsLink = `https://www.google.com/maps?q=${latitude},${longitude}`;\n\n    msg.payload = {\n        name: \"GPS Location\",\n        lat: latitude,\n        lon: longitude,\n        alt: altitude,\n        unit: \"m\",\n        link: googleMapsLink // Add the clickable link\n    };\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "402b71d5567ea119",
                "10bdc0c3ca3fe145"
            ]
        ]
    },
    {
        "id": "402b71d5567ea119",
        "type": "debug",
        "z": "b52c255f2f8f8c4e",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1100,
        "wires": []
    },
    {
        "id": "2cb4437904b60d4c",
        "type": "ui_chart",
        "z": "b52c255f2f8f8c4e",
        "d": true,
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 13,
        "width": 0,
        "height": 0,
        "label": "Temperature  LoRaWAN",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "48",
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "c0a4fc9eba324b36",
        "type": "ui_chart",
        "z": "b52c255f2f8f8c4e",
        "d": true,
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 14,
        "width": 0,
        "height": 0,
        "label": "Humidity LoRaWAN",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "48",
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "10bdc0c3ca3fe145",
        "type": "ui_template",
        "z": "b52c255f2f8f8c4e",
        "group": "a206d81b.bc8288",
        "name": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<a href=\"{{msg.payload.link}}\" target=\"_blank\" style=\"text-decoration: none; color: blue;\">\n    View on Google Maps\n</a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "80fa5d75763f839a",
        "type": "influxdb out",
        "z": "b52c255f2f8f8c4e",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Temperature",
        "measurement": "temperature",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 970,
        "y": 880,
        "wires": []
    },
    {
        "id": "3cfd4facaaaf15a4",
        "type": "influxdb out",
        "z": "b52c255f2f8f8c4e",
        "influxdb": "472e17de7ee4e7eb",
        "name": "humidity",
        "measurement": "humidity",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 840,
        "y": 1040,
        "wires": []
    },
    {
        "id": "31802587ab7bd9b1",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 20",
        "func": "// Ensure payload structure is valid\nif (msg.payload && msg.payload.PayloadData && msg.payload.WirelessMetadata && msg.payload.WirelessMetadata.LoRaWAN) {\n    try {\n        // Decode the PayloadData from Base64 to hex\n        let rawPayload = Buffer.from(msg.payload.PayloadData, 'base64').toString('hex');\n        msg.payload.rawPayload = rawPayload;\n\n        // Extract DevEui\n        let devEui = msg.payload.WirelessMetadata.LoRaWAN.DevEui;\n        msg.payload.devEui = devEui;\n\n        node.warn(`Decoded PayloadData: ${rawPayload}`);\n        node.warn(`DevEui: ${devEui}`);\n        return msg; // Pass the message along\n    } catch (error) {\n        node.error(\"Error decoding PayloadData: \" + error.message);\n        return null; // Stop further processing\n    }\n} else {\n    node.error(\"PayloadData or WirelessMetadata is missing or invalid.\");\n    return null; // Stop further processing\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [
            [
                "cb7e67f66722d130",
                "30667439c2a3baee"
            ]
        ]
    },
    {
        "id": "cb7e67f66722d130",
        "type": "debug",
        "z": "558e63b9134c7dd0",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 80,
        "wires": []
    },
    {
        "id": "69c9261cbb607bb3",
        "type": "debug",
        "z": "558e63b9134c7dd0",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 160,
        "wires": []
    },
    {
        "id": "5516047848a90132",
        "type": "mqtt in",
        "z": "558e63b9134c7dd0",
        "name": "HTCC-AB02",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "31802587ab7bd9b1"
            ]
        ]
    },
    {
        "id": "2dfc101dce1feff8",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 23",
        "func": "msg.payload = msg.payload.decodedTemp\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "8a53c035784757ae"
            ]
        ]
    },
    {
        "id": "bb3ad10cde967fc5",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 24",
        "func": "msg.payload = msg.payload.decodedHum\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "0191a2211a73a6fc"
            ]
        ]
    },
    {
        "id": "ecef7f942a921dac",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 25",
        "func": "msg.payload = msg.payload.decodedPress\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "9d2509f5128b36e3"
            ]
        ]
    },
    {
        "id": "21a4a26d48c193e3",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 40",
        "func": "msg.payload = msg.payload.decodedBatteryVoltage\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "df8dee787f1243e1"
            ]
        ]
    },
    {
        "id": "7480758204bd60c8",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 41",
        "func": "msg.payload = msg.payload.decodedBatteryLevel\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "d81cf5e37d0222fb"
            ]
        ]
    },
    {
        "id": "df8dee787f1243e1",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "Battery Voltage mV AB-02",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Battery Voltage mV AB-02",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d81cf5e37d0222fb",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "Battery Level % AB-02",
        "group": "a206d81b.bc8288",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Battery Level % AB-02",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "30667439c2a3baee",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 42",
        "func": "if (msg.payload && msg.payload.rawPayload && msg.payload.devEui === \"0003322e0a3a2ac6\") {\n    try {\n        let rawPayload = Buffer.from(msg.payload.rawPayload, 'hex');\n\n        // Log the payload length and content for analysis\n        node.warn(`Payload Length: ${rawPayload.length}, Payload: ${rawPayload.toString('hex')}`);\n\n        // Define valid payload length\n        const VALID_LENGTH = 12;\n\n        // Check if payload length matches the expected length\n        if (rawPayload.length !== VALID_LENGTH) {\n            node.warn(`Ignoring payload with invalid length (${rawPayload.length}): ${rawPayload.toString('hex')}`);\n            return null;\n        }\n\n        // Decode temperature (offset 0, 16-bit value)\n        let tempRaw = rawPayload.readUInt16BE(0);\n        let decodedTemp = tempRaw / 10.0; // Adjust scale factor if needed\n\n        // Decode humidity (offset 2, 16-bit value)\n        let humRaw = rawPayload.readUInt16BE(2);\n        let decodedHum = humRaw / 10.0; // Adjust scale factor if needed\n\n        // Decode pressure (offset 4, 32-bit value)\n        let pressRaw = rawPayload.readUInt32BE(4);\n        let decodedPress = pressRaw / 10000.0; // Adjust scale factor if needed\n\n        // Decode battery voltage (offset 8, 16-bit value)\n        let batteryVoltageRaw = rawPayload.readUInt16BE(8);\n        let decodedBatteryVoltage = batteryVoltageRaw; // Value is already in mV\n\n        // Decode battery level (offset 10, 8-bit value)\n        let batteryLevelRaw = rawPayload.readUInt8(10);\n        let decodedBatteryLevel = batteryLevelRaw; // Value is in percentage (0-100)\n\n        // Log decoded values for further analysis\n        node.warn(`Decoded Temp: ${decodedTemp} °C, Decoded Hum: ${decodedHum} %, Decoded Pressure: ${decodedPress} hPa, Decoded Battery Voltage: ${decodedBatteryVoltage} mV, Decoded Battery Level: ${decodedBatteryLevel} %`);\n\n        // Update payload\n        msg.payload.decodedTemp = decodedTemp;\n        msg.payload.decodedHum = decodedHum;\n        msg.payload.decodedPress = decodedPress;\n        msg.payload.decodedBatteryVoltage = decodedBatteryVoltage;\n        msg.payload.decodedBatteryLevel = decodedBatteryLevel;\n\n        return msg;\n    } catch (error) {\n        node.error(\"Error decoding payload: \" + error.message);\n        return null;\n    }\n} else {\n    node.warn(\"Ignoring message from unknown or invalid source.\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "2dfc101dce1feff8",
                "bb3ad10cde967fc5",
                "ecef7f942a921dac",
                "21a4a26d48c193e3",
                "7480758204bd60c8",
                "69c9261cbb607bb3"
            ]
        ]
    },
    {
        "id": "8a53c035784757ae",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Temperature AB-02",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0191a2211a73a6fc",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "Humidity AB-02",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9d2509f5128b36e3",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 11,
        "width": 0,
        "height": 0,
        "label": "Baro Pressure AB-02",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2156f5e948b173e6",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "d": true,
        "name": "Decode and Iterate",
        "func": "// Input raw payload in Base64\nlet rawPayloadBase64 = msg.payload;\n\n// Decode Base64 to a buffer\nlet rawPayload = Buffer.from(rawPayloadBase64, 'base64');\n\n// Log the raw payload for debugging\nnode.warn(`Raw Payload: ${rawPayload.toString('hex')}`);\n\n// Tolerance for matching\nconst TOLERANCE = 0.05;\n\n// Target values\nlet targetTemp = 17.99;\nlet targetHum = 23.00;\nlet targetPress = 939.78;\n\n// Iterate for temperature\nnode.warn(\"Analyzing Temperature...\");\nfor (let tempOffset = 0; tempOffset <= rawPayload.length - 2; tempOffset++) {\n    let tempRaw = rawPayload.readUInt16BE(tempOffset);\n    for (let tempScale of [1, 10, 100, 1000]) {\n        let tempValue = tempRaw / tempScale;\n        node.warn(`Temp Offset: ${tempOffset}, Scale: ${tempScale}, Value: ${tempValue}`);\n        if (Math.abs(tempValue - targetTemp) <= TOLERANCE) {\n            node.warn(`Matched Temp - Offset: ${tempOffset}, Scale: ${tempScale}, Value: ${tempValue}`);\n        }\n    }\n}\n\n// Iterate for humidity\nnode.warn(\"Analyzing Humidity...\");\nfor (let humOffset = 0; humOffset <= rawPayload.length - 2; humOffset++) {\n    let humRaw = rawPayload.readUInt16BE(humOffset);\n    for (let humScale of [1, 10, 100, 1000]) {\n        let humValue = humRaw / humScale;\n        node.warn(`Hum Offset: ${humOffset}, Scale: ${humScale}, Value: ${humValue}`);\n        if (Math.abs(humValue - targetHum) <= TOLERANCE) {\n            node.warn(`Matched Humidity - Offset: ${humOffset}, Scale: ${humScale}, Value: ${humValue}`);\n        }\n    }\n}\n\n// Iterate for pressure\nnode.warn(\"Analyzing Pressure...\");\nfor (let pressOffset = 0; pressOffset <= rawPayload.length - 2; pressOffset++) {\n    let pressRaw = rawPayload.readUInt16BE(pressOffset);\n    for (let pressScale of [1, 10, 100, 1000]) {\n        let pressValue = pressRaw / pressScale;\n        node.warn(`Press Offset: ${pressOffset}, Scale: ${pressScale}, Value: ${pressValue}`);\n        if (Math.abs(pressValue - targetPress) <= TOLERANCE) {\n            node.warn(`Matched Pressure - Offset: ${pressOffset}, Scale: ${pressScale}, Value: ${pressValue}`);\n        }\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 580,
        "wires": [
            [
                "806d55dd4fbf3ffb"
            ]
        ]
    },
    {
        "id": "806d55dd4fbf3ffb",
        "type": "debug",
        "z": "558e63b9134c7dd0",
        "name": "Debug Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 580,
        "wires": []
    },
    {
        "id": "c31f10f8f477813f",
        "type": "inject",
        "z": "558e63b9134c7dd0",
        "name": "Inject Base64 Payload",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ALoA/ACrAAA=",
        "payloadType": "str",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "2156f5e948b173e6",
                "cd1f951fa31cb3e4"
            ]
        ]
    },
    {
        "id": "cd1f951fa31cb3e4",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "decoder-iteration",
        "func": "// Preprocess the payload to ensure rawPayload is present\nif (!msg.payload) {\n    node.warn(\"Payload is missing.\");\n    return null;\n}\n\nlet rawPayload;\n\n// Check if payload is already hex or Base64 and convert accordingly\nif (msg.payload.rawPayload) {\n    rawPayload = Buffer.from(msg.payload.rawPayload, 'hex');\n} else if (typeof msg.payload === 'string') {\n    rawPayload = Buffer.from(msg.payload, 'base64');\n} else {\n    node.warn(\"Payload does not contain 'rawPayload'. Please check the input.\");\n    return null;\n}\n\n// Log the raw payload\nnode.warn(`Raw Payload Bytes: ${rawPayload.toString('hex')}`);\n\n// Function to decode and log potential temperature combinations\nfunction decodeTemperature(buffer) {\n    const results = [];\n    for (let offset = 0; offset <= buffer.length - 2; offset++) {\n        const tempBigEndian = buffer.readUInt16BE(offset);\n        const tempLittleEndian = buffer.readUInt16LE(offset);\n\n        // Apply scaling factors\n        const scales = [1, 10, 100, 1000];\n        scales.forEach(scale => {\n            const scaledTempBE = tempBigEndian / scale;\n            const scaledTempLE = tempLittleEndian / scale;\n\n            results.push({\n                offset,\n                scale,\n                scaledTempBE,\n                scaledTempLE,\n            });\n        });\n    }\n    return results;\n}\n\n// Decode and log all combinations for temperature\nconst combinations = decodeTemperature(rawPayload);\n\ncombinations.forEach(({ offset, scale, scaledTempBE, scaledTempLE }) => {\n    node.warn(\n        `Offset: ${offset}, Scale: ${scale}, Temp (BE): ${scaledTempBE}, Temp (LE): ${scaledTempLE}`\n    );\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 540,
        "wires": [
            [
                "806d55dd4fbf3ffb"
            ]
        ]
    },
    {
        "id": "abbff7a373280e3e",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 29",
        "func": "// Ensure payload structure is valid\nif (msg.payload && msg.payload.PayloadData && msg.payload.WirelessMetadata && msg.payload.WirelessMetadata.LoRaWAN) {\n    try {\n        // Decode the PayloadData from Base64 to hex\n        let rawPayload = Buffer.from(msg.payload.PayloadData, 'base64').toString('hex');\n        msg.payload.rawPayload = rawPayload;\n\n        // Extract DevEui\n        let devEui = msg.payload.WirelessMetadata.LoRaWAN.DevEui;\n        msg.payload.devEui = devEui;\n\n        node.warn(`Decoded PayloadData: ${rawPayload}`);\n        node.warn(`DevEui: ${devEui}`);\n        return msg; // Pass the message along\n    } catch (error) {\n        node.error(\"Error decoding PayloadData: \" + error.message);\n        return null; // Stop further processing\n    }\n} else {\n    node.error(\"PayloadData or WirelessMetadata is missing or invalid.\");\n    return null; // Stop further processing\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 760,
        "wires": [
            [
                "c1f10fa00b244194",
                "99438947367c2f58"
            ]
        ]
    },
    {
        "id": "c1f10fa00b244194",
        "type": "debug",
        "z": "558e63b9134c7dd0",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 760,
        "wires": []
    },
    {
        "id": "99438947367c2f58",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 30",
        "func": "if (msg.payload && msg.payload.rawPayload && msg.payload.devEui === \"00071916143a7527\") {\n    try {\n        let rawPayload = Buffer.from(msg.payload.rawPayload, 'hex');\n\n        // Log the payload length and content for analysis\n        node.warn(`Payload Length: ${rawPayload.length}, Payload: ${rawPayload.toString('hex')}`);\n\n        // Define valid payload length\n        const VALID_LENGTH = 12;\n\n        // Check if payload length matches the expected length\n        if (rawPayload.length !== VALID_LENGTH) {\n            node.warn(`Ignoring payload with invalid length (${rawPayload.length}): ${rawPayload.toString('hex')}`);\n            return null;\n        }\n\n        // Decode temperature (offset 0, 16-bit value)\n        let tempRaw = rawPayload.readUInt16BE(0);\n        let decodedTemp = tempRaw / 10.0; // Adjust scale factor if needed\n\n        // Decode humidity (offset 2, 16-bit value)\n        let humRaw = rawPayload.readUInt16BE(2);\n        let decodedHum = humRaw / 10.0; // Adjust scale factor if needed\n\n        // Decode pressure (offset 4, 32-bit value)\n        let pressRaw = rawPayload.readUInt32BE(4);\n        let decodedPress = pressRaw / 10000.0; // Adjust scale factor if needed\n\n        // Decode battery voltage (offset 8, 16-bit value)\n        let batteryVoltageRaw = rawPayload.readUInt16BE(8);\n        let decodedBatteryVoltage = batteryVoltageRaw; // Value is already in mV\n\n        // Decode battery level (offset 10, 8-bit value)\n        let batteryLevelRaw = rawPayload.readUInt8(10);\n        let decodedBatteryLevel = batteryLevelRaw; // Value is in percentage (0-100)\n\n        // Log decoded values for further analysis\n        node.warn(`Decoded Temp: ${decodedTemp} °C, Decoded Hum: ${decodedHum} %, Decoded Pressure: ${decodedPress} hPa, Decoded Battery Voltage: ${decodedBatteryVoltage} mV, Decoded Battery Level: ${decodedBatteryLevel} %`);\n\n        // Update payload\n        msg.payload.decodedTemp = decodedTemp;\n        msg.payload.decodedHum = decodedHum;\n        msg.payload.decodedPress = decodedPress;\n        msg.payload.decodedBatteryVoltage = decodedBatteryVoltage;\n        msg.payload.decodedBatteryLevel = decodedBatteryLevel;\n\n        return msg;\n    } catch (error) {\n        node.error(\"Error decoding payload: \" + error.message);\n        return null;\n    }\n} else {\n    node.warn(\"Ignoring message from unknown or invalid source.\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 840,
        "wires": [
            [
                "4749a1442f74c51c",
                "d83ebf3b2382938b",
                "5220349c3e61b185",
                "60da62615a9cf81e",
                "29a362718cf7277c",
                "07edd4fac3e71bfb"
            ]
        ]
    },
    {
        "id": "4749a1442f74c51c",
        "type": "debug",
        "z": "558e63b9134c7dd0",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 840,
        "wires": []
    },
    {
        "id": "8b9c8130373243ed",
        "type": "mqtt in",
        "z": "558e63b9134c7dd0",
        "name": "htcc-AB01",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 840,
        "wires": [
            [
                "abbff7a373280e3e"
            ]
        ]
    },
    {
        "id": "d83ebf3b2382938b",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 31",
        "func": "msg.payload = msg.payload.decodedTemp\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 900,
        "wires": [
            [
                "960230f9870a71cf"
            ]
        ]
    },
    {
        "id": "5220349c3e61b185",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 32",
        "func": "msg.payload = msg.payload.decodedHum\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 960,
        "wires": [
            [
                "2951ece3835ec9b0"
            ]
        ]
    },
    {
        "id": "60da62615a9cf81e",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 33",
        "func": "msg.payload = msg.payload.decodedPress\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1020,
        "wires": [
            [
                "3740af749d0f3a3d"
            ]
        ]
    },
    {
        "id": "29a362718cf7277c",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 34",
        "func": "msg.payload = msg.payload.decodedBatteryVoltage\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1080,
        "wires": [
            [
                "29051cbb0fd6a266"
            ]
        ]
    },
    {
        "id": "07edd4fac3e71bfb",
        "type": "function",
        "z": "558e63b9134c7dd0",
        "name": "function 35",
        "func": "msg.payload = msg.payload.decodedBatteryLevel\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1140,
        "wires": [
            [
                "f64866c4d4379257"
            ]
        ]
    },
    {
        "id": "29051cbb0fd6a266",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "Battery Voltage mV",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Battery Voltage mV AB-01",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "f64866c4d4379257",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "Battery Level %",
        "group": "a206d81b.bc8288",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Battery Level % AB-01",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "960230f9870a71cf",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Temperature AB-01",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "2951ece3835ec9b0",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "Humidity AB-01",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "3740af749d0f3a3d",
        "type": "ui_chart",
        "z": "558e63b9134c7dd0",
        "name": "",
        "group": "a206d81b.bc8288",
        "order": 11,
        "width": 0,
        "height": 0,
        "label": "Baro Pressure AB-01",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "daa08a62a44b8286",
        "type": "debug",
        "z": "8b057b0147da2a46",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 360,
        "wires": []
    },
    {
        "id": "b6773796b24b0325",
        "type": "debug",
        "z": "8b057b0147da2a46",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 460,
        "wires": []
    },
    {
        "id": "08f424844b623496",
        "type": "http request",
        "z": "8b057b0147da2a46",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/1493400/feeds.json?api_key=LR5YBGU0QI7Q8EE5&results=2",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 360,
        "wires": [
            [
                "6065c65a790b1a97"
            ]
        ]
    },
    {
        "id": "1e4af42b807e7daa",
        "type": "http request",
        "z": "8b057b0147da2a46",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/1493400/fields/1.json?api_key=LR5YBGU0QI7Q8EE5&results=2",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "a4cd792759f99a1f"
            ]
        ]
    },
    {
        "id": "9f732df6aa0bfd1a",
        "type": "http request",
        "z": "8b057b0147da2a46",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/1493400/status.json?api_key=LR5YBGU0QI7Q8EE5",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "68f781f0a15bd283"
            ]
        ]
    },
    {
        "id": "f298e2adcb1cebe6",
        "type": "inject",
        "z": "8b057b0147da2a46",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "08f424844b623496"
            ]
        ]
    },
    {
        "id": "a3b36f152e975ef6",
        "type": "inject",
        "z": "8b057b0147da2a46",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 460,
        "wires": [
            [
                "1e4af42b807e7daa"
            ]
        ]
    },
    {
        "id": "4718a12bbd3f7ca7",
        "type": "inject",
        "z": "8b057b0147da2a46",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "9f732df6aa0bfd1a"
            ]
        ]
    },
    {
        "id": "fd25702f294a23fd",
        "type": "debug",
        "z": "8b057b0147da2a46",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 580,
        "wires": []
    },
    {
        "id": "68f781f0a15bd283",
        "type": "json",
        "z": "8b057b0147da2a46",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 620,
        "wires": [
            [
                "fd25702f294a23fd"
            ]
        ]
    },
    {
        "id": "a4cd792759f99a1f",
        "type": "json",
        "z": "8b057b0147da2a46",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 520,
        "wires": [
            [
                "b6773796b24b0325"
            ]
        ]
    },
    {
        "id": "6065c65a790b1a97",
        "type": "json",
        "z": "8b057b0147da2a46",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 420,
        "wires": [
            [
                "daa08a62a44b8286",
                "7df8f3a2aa8020f2",
                "83c2f73e81bf4b8a",
                "57364054c4148a94"
            ]
        ]
    },
    {
        "id": "98a43c89e2e68cdb",
        "type": "inject",
        "z": "8b057b0147da2a46",
        "d": true,
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 720,
        "wires": [
            [
                "47f5bdf14895980e"
            ]
        ]
    },
    {
        "id": "47f5bdf14895980e",
        "type": "http request",
        "z": "8b057b0147da2a46",
        "name": "Read ThingSpeak",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/1493400/feeds.json?api_key=LR5YBGU0QI7Q8EE5&results=2",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 430,
        "y": 720,
        "wires": [
            [
                "566892e2528728b8"
            ]
        ]
    },
    {
        "id": "566892e2528728b8",
        "type": "debug",
        "z": "8b057b0147da2a46",
        "name": "ThingSpeak Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 630,
        "y": 720,
        "wires": []
    },
    {
        "id": "7df8f3a2aa8020f2",
        "type": "function",
        "z": "8b057b0147da2a46",
        "name": "function 26",
        "func": "msg.payload = msg.payload.feeds[0].field1\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "cff56537ad745998",
                "48c52bf54e46127b",
                "b4c1dc8fdc363405"
            ]
        ]
    },
    {
        "id": "cff56537ad745998",
        "type": "debug",
        "z": "8b057b0147da2a46",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 280,
        "wires": []
    },
    {
        "id": "83c2f73e81bf4b8a",
        "type": "function",
        "z": "8b057b0147da2a46",
        "name": "function 27",
        "func": "msg.payload = msg.payload.feeds[0].field2\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "5bb153cb52956c54",
                "f85c71becc76fbe1"
            ]
        ]
    },
    {
        "id": "5bb153cb52956c54",
        "type": "debug",
        "z": "8b057b0147da2a46",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "57364054c4148a94",
        "type": "function",
        "z": "8b057b0147da2a46",
        "name": "function 28",
        "func": "msg.payload = msg.payload.feeds[0].field3\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 120,
        "wires": [
            [
                "aca6e835a4539d0d",
                "94c5a8e6eae83d2e"
            ]
        ]
    },
    {
        "id": "aca6e835a4539d0d",
        "type": "debug",
        "z": "8b057b0147da2a46",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "94c5a8e6eae83d2e",
        "type": "ui_chart",
        "z": "8b057b0147da2a46",
        "name": "",
        "group": "a9c91b6e04749bdd",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Altitude",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f85c71becc76fbe1",
        "type": "ui_chart",
        "z": "8b057b0147da2a46",
        "name": "",
        "group": "a9c91b6e04749bdd",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "48c52bf54e46127b",
        "type": "ui_chart",
        "z": "8b057b0147da2a46",
        "name": "",
        "group": "a9c91b6e04749bdd",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Temp",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "36",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b4c1dc8fdc363405",
        "type": "influxdb out",
        "z": "8b057b0147da2a46",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Outside_Temperature",
        "measurement": "Outside_temperature",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1140,
        "y": 220,
        "wires": []
    },
    {
        "id": "7cb1acc76a2ce123",
        "type": "mqtt in",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "",
        "topic": "esp32/dht11/data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5757ee3b16ff2e23",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "86a4825a0ddeda9b",
                "3063eda8c9f8923e",
                "5a0d10a4b728dc6d"
            ]
        ]
    },
    {
        "id": "86a4825a0ddeda9b",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 160,
        "wires": []
    },
    {
        "id": "3063eda8c9f8923e",
        "type": "function",
        "z": "23f403e35f4fa2ae",
        "name": "function 36",
        "func": "msg.payload = msg.payload.temperature\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "ecb4895378564b71"
            ]
        ]
    },
    {
        "id": "5a0d10a4b728dc6d",
        "type": "function",
        "z": "23f403e35f4fa2ae",
        "name": "function 37",
        "func": "msg.payload = msg.payload.humidity\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "1dde409e78e8cedd"
            ]
        ]
    },
    {
        "id": "ecb4895378564b71",
        "type": "ui_chart",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "Temperature",
        "group": "64adc831f0d4713d",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 650,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1dde409e78e8cedd",
        "type": "ui_chart",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "humidity",
        "group": "64adc831f0d4713d",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "faa78bb615e28a54",
        "type": "mqtt in",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "topic": "esp32/dht11/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 440,
        "wires": [
            [
                "79ba50d4a684c4ee",
                "2aa09a5626614a87",
                "3132fb1cc58527e5"
            ]
        ]
    },
    {
        "id": "79ba50d4a684c4ee",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "debug 50",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 440,
        "wires": []
    },
    {
        "id": "2aa09a5626614a87",
        "type": "function",
        "z": "23f403e35f4fa2ae",
        "name": "function 38",
        "func": "msg.payload = msg.payload.temperature\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 540,
        "wires": [
            [
                "be7c563e14f3328f",
                "67f2142c0872a58f"
            ]
        ]
    },
    {
        "id": "3132fb1cc58527e5",
        "type": "function",
        "z": "23f403e35f4fa2ae",
        "name": "function 39",
        "func": "msg.payload = msg.payload.humidity\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 600,
        "wires": [
            [
                "d87abb59af482c1b"
            ]
        ]
    },
    {
        "id": "be7c563e14f3328f",
        "type": "ui_chart",
        "z": "23f403e35f4fa2ae",
        "name": "Temperature",
        "group": "64adc831f0d4713d",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d87abb59af482c1b",
        "type": "ui_chart",
        "z": "23f403e35f4fa2ae",
        "name": "humidity",
        "group": "64adc831f0d4713d",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 600,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "67f2142c0872a58f",
        "type": "ui_text",
        "z": "23f403e35f4fa2ae",
        "group": "a206d81b.bc8288",
        "order": 22,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "temperature -dht11",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 650,
        "y": 480,
        "wires": []
    },
    {
        "id": "c03799e38e6187c1",
        "type": "inject",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "str",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "7f1f678a188d7630"
            ]
        ]
    },
    {
        "id": "bdb7dbf8dd99d68c",
        "type": "mqtt out",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "publish_setpoint",
        "topic": "esp32/setpoint",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "950512cc0fb4c81f",
        "x": 800,
        "y": 800,
        "wires": []
    },
    {
        "id": "8e9dd074d151aaa9",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "debug 53",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 720,
        "wires": []
    },
    {
        "id": "7f1f678a188d7630",
        "type": "ui_text_input",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "",
        "label": "heater setpoint",
        "tooltip": "",
        "group": "a206d81b.bc8288",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "esp32/request_setpoint",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 460,
        "y": 720,
        "wires": [
            [
                "8e9dd074d151aaa9",
                "bdb7dbf8dd99d68c"
            ]
        ]
    },
    {
        "id": "ed378079cc8fe4ec",
        "type": "mqtt in",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "topic": "esp32/request_setpoint",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "b7b7292ec88ec8e7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 840,
        "wires": [
            [
                "4b5a8cd17f7e0c9d"
            ]
        ]
    },
    {
        "id": "4b5a8cd17f7e0c9d",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 860,
        "wires": []
    },
    {
        "id": "43aaea6570fb505b",
        "type": "mqtt in",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "ESP32 Setpoint Request",
        "topic": "esp32/request_setpoint",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "950512cc0fb4c81f",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 1060,
        "wires": [
            [
                "c41d14f43a253710"
            ]
        ]
    },
    {
        "id": "c41d14f43a253710",
        "type": "function",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "Retrieve Stored Setpoint",
        "func": "// Check if the ESP32 sent \"update\"\nif (msg.payload === \"update\") {\n    // Retrieve the last setpoint from Node-RED memory\n    msg.payload = flow.get('setpoint') || 20;  // Default to 20°C if no value is stored\n    return msg;  // Send the response\n} else {\n    return null;  // Ignore any other messages\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1140,
        "wires": [
            [
                "93db656af1b5b504"
            ]
        ]
    },
    {
        "id": "93db656af1b5b504",
        "type": "mqtt out",
        "z": "23f403e35f4fa2ae",
        "d": true,
        "name": "Publish Setpoint to ESP32",
        "topic": "esp32/setpoint",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "950512cc0fb4c81f",
        "x": 780,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d98ba2101c6830e8",
        "type": "function",
        "z": "23f403e35f4fa2ae",
        "name": "Store Setpoint",
        "func": "var newSetpoint = parseFloat(msg.payload);  // Convert to float\nif (!isNaN(newSetpoint) && newSetpoint > 0) {\n    flow.set('setpoint', newSetpoint);  // Store setpoint\n    node.warn(\"🔥 New Setpoint Stored: \" + newSetpoint);  // Debug message\n} else {\n    node.warn(\"⚠️ Invalid Setpoint Ignored: \" + msg.payload);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 920,
        "wires": [
            [
                "b63af2dde9ab1ca1"
            ]
        ]
    },
    {
        "id": "66b981cb0527647f",
        "type": "inject",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "22",
        "payloadType": "str",
        "x": 190,
        "y": 960,
        "wires": [
            [
                "d98ba2101c6830e8"
            ]
        ]
    },
    {
        "id": "508c7050e8a4c0f0",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b63af2dde9ab1ca1",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 920,
        "wires": []
    },
    {
        "id": "a18091e26f06a263",
        "type": "ui_text_input",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "label": "heater setpoint",
        "tooltip": "",
        "group": "a206d81b.bc8288",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "esp32/request_setpoint",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 440,
        "y": 1000,
        "wires": [
            [
                "d98ba2101c6830e8"
            ]
        ]
    },
    {
        "id": "bd636e70b057b255",
        "type": "ui_switch",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "label": "Heater",
        "tooltip": "",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "esp32/heat",
        "topicType": "str",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 350,
        "y": 1560,
        "wires": [
            [
                "58aba12460f67e3d",
                "2291cff6a6e75aae"
            ]
        ]
    },
    {
        "id": "58aba12460f67e3d",
        "type": "mqtt out",
        "z": "23f403e35f4fa2ae",
        "name": "AWS_Heater",
        "topic": "esp32/heat",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b7b7292ec88ec8e7",
        "x": 610,
        "y": 1520,
        "wires": []
    },
    {
        "id": "2291cff6a6e75aae",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1640,
        "wires": []
    },
    {
        "id": "ad90edb8d7be6806",
        "type": "inject",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 150,
        "y": 1520,
        "wires": [
            [
                "bd636e70b057b255"
            ]
        ]
    },
    {
        "id": "cf18c02012f21ec1",
        "type": "inject",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 170,
        "y": 1640,
        "wires": [
            [
                "bd636e70b057b255"
            ]
        ]
    },
    {
        "id": "c2511b28a7a4f64d",
        "type": "mqtt in",
        "z": "23f403e35f4fa2ae",
        "name": "ESP32 Setpoint Request",
        "topic": "esp32/request_setpoint",
        "qos": "1",
        "datatype": "utf8",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "e53e75942caf5faa"
            ]
        ]
    },
    {
        "id": "e53e75942caf5faa",
        "type": "function",
        "z": "23f403e35f4fa2ae",
        "name": "Retrieve Stored Setpoint",
        "func": "if (msg.payload === \"update\") {\n    var storedSetpoint = flow.get('setpoint');  // Retrieve stored setpoint\n    if (storedSetpoint === undefined) {\n        storedSetpoint = 20;  // Default to 20°C if not stored yet\n    }\n    node.warn(\"📡 Setpoint Retrieved & Sent: \" + storedSetpoint);\n    return { topic: \"esp32/setpoint\", payload: storedSetpoint.toString() };  // Convert to string for MQTT\n}\nelse {\n    // If this is a new setpoint update, store it\n    var newSetpoint = parseFloat(msg.payload);\n    if (!isNaN(newSetpoint) && newSetpoint > 0) {\n        flow.set('setpoint', newSetpoint);  // Save new setpoint\n        node.warn(\"🔥 New Setpoint Stored: \" + newSetpoint);\n\n        // 🔥 EXTRA DEBUG: Read back immediately to confirm storage\n        var testLoad = flow.get('setpoint');\n        node.warn(\"🔄 TEST READBACK: \" + testLoad);\n\n        return null;  // No immediate message output, just storing\n    } else {\n        node.warn(\"⚠️ Invalid Setpoint Received: \" + msg.payload);\n        return null;  // Ignore invalid inputs\n    }\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1260,
        "wires": [
            [
                "f4f4155a21d7e816"
            ]
        ]
    },
    {
        "id": "126f8852c0c4209a",
        "type": "inject",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "str",
        "x": 590,
        "y": 1360,
        "wires": [
            [
                "f4f4155a21d7e816",
                "bc60c962f98c030d"
            ]
        ]
    },
    {
        "id": "f4f4155a21d7e816",
        "type": "mqtt out",
        "z": "23f403e35f4fa2ae",
        "name": "esp32_setpoint out",
        "topic": "esp32/setpoint",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b7b7292ec88ec8e7",
        "x": 830,
        "y": 1300,
        "wires": []
    },
    {
        "id": "bc60c962f98c030d",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1420,
        "wires": []
    },
    {
        "id": "33a7d94c49a8ebe9",
        "type": "mqtt in",
        "z": "23f403e35f4fa2ae",
        "name": "",
        "topic": "esp32/heat",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "b7b7292ec88ec8e7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 480,
        "y": 1720,
        "wires": [
            [
                "8ee6c7357cc2d016"
            ]
        ]
    },
    {
        "id": "8ee6c7357cc2d016",
        "type": "debug",
        "z": "23f403e35f4fa2ae",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1720,
        "wires": []
    },
    {
        "id": "e3091d4fe0c5f25e",
        "type": "debug",
        "z": "ea87f682ab2af7eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 360,
        "wires": []
    },
    {
        "id": "2df59653eeebb8ab",
        "type": "mqtt in",
        "z": "ea87f682ab2af7eb",
        "name": "AWSMQTT subscribe",
        "topic": "ESP32/GAS",
        "qos": "0",
        "datatype": "auto",
        "broker": "0e340fc982b477a1",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 630,
        "y": 240,
        "wires": [
            [
                "e3091d4fe0c5f25e"
            ]
        ]
    },
    {
        "id": "aeef640fb11aa4cc",
        "type": "ui_switch",
        "z": "ea87f682ab2af7eb",
        "name": "",
        "label": "Gas Valve",
        "tooltip": "",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "alarm",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "safe",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "88f162e9cbe4bfe7",
                "4350558b777e8b9a"
            ]
        ]
    },
    {
        "id": "88f162e9cbe4bfe7",
        "type": "mqtt out",
        "z": "ea87f682ab2af7eb",
        "name": "",
        "topic": "ESP32/GAS",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0e340fc982b477a1",
        "x": 540,
        "y": 520,
        "wires": []
    },
    {
        "id": "4350558b777e8b9a",
        "type": "debug",
        "z": "ea87f682ab2af7eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 600,
        "wires": []
    },
    {
        "id": "02fd450ab8ee22db",
        "type": "inject",
        "z": "ea87f682ab2af7eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "safe",
        "payloadType": "str",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "aeef640fb11aa4cc"
            ]
        ]
    },
    {
        "id": "7d35adc2c2b5a8f2",
        "type": "inject",
        "z": "ea87f682ab2af7eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "alarm",
        "payloadType": "str",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "aeef640fb11aa4cc"
            ]
        ]
    },
    {
        "id": "d84a1fed85ca3d68",
        "type": "mqtt in",
        "z": "3eb223b4b2c18a36",
        "name": "Energy Monitor",
        "topic": "esp32/energy_meter",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "8c8f1548d5205ea0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "f6c238f8c5121818",
                "bed20e973f40a51f"
            ]
        ]
    },
    {
        "id": "f6c238f8c5121818",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "MQTT Input",
        "func": "// Retrieve previously stored values (if any) from context\nlet current1 = context.get('current1') || null;\nlet current2 = context.get('current2') || null;\nlet power1 = context.get('power1') || null;\nlet power2 = context.get('power2') || null;\nlet energy1 = context.get('energy1') || null;\nlet energy2 = context.get('energy2') || null;\nlet timestamp1 = context.get('timestamp1') || null;\nlet timestamp2 = context.get('timestamp2') || null;\n\n// Get the current timestamp\nlet currentTimestamp = Date.now();\n\n// Check the meter address and store the respective values\nif (msg.payload.meter_address === 1) {\n    current1 = msg.payload.current;\n    power1 = msg.payload.power;\n    energy1 = msg.payload.energy;\n    timestamp1 = currentTimestamp; // Store timestamp for meter 1\n    context.set('current1', current1);\n    context.set('power1', power1);\n    context.set('energy1', energy1);\n    context.set('timestamp1', timestamp1);\n    node.warn(\"Stored values from meter 1 - Current: \" + current1 + \", Power: \" + power1 + \", Energy: \" + energy1);\n} else if (msg.payload.meter_address === 2) {\n    current2 = msg.payload.current;\n    power2 = msg.payload.power;\n    energy2 = msg.payload.energy;\n    timestamp2 = currentTimestamp; // Store timestamp for meter 2\n    context.set('current2', current2);\n    context.set('power2', power2);\n    context.set('energy2', energy2);\n    context.set('timestamp2', timestamp2);\n    node.warn(\"Stored values from meter 2 - Current: \" + current2 + \", Power: \" + power2 + \", Energy: \" + energy2);\n}\n\n// Check if all values are available for both meters\nif (current1 !== null && current2 !== null && power1 !== null && power2 !== null && energy1 !== null && energy2 !== null) {\n    // Calculate total current, power, and energy\n    let totalCurrent = current1 + current2;\n    let totalPower = power1 + power2;\n    let totalEnergy = energy1 + energy2;\n\n    // Calculate the average timestamp for the two meters\n    let averageTimestamp = (timestamp1 + timestamp2) / 2;\n\n    // Prepare the output message\n    msg.payload = {\n        totalCurrent: totalCurrent,\n        totalPower: totalPower,\n        totalEnergy: totalEnergy,\n        timestamp: averageTimestamp // Include the average timestamp in the output\n    };\n\n    // Clear stored values after computation\n    context.set('current1', null);\n    context.set('current2', null);\n    context.set('power1', null);\n    context.set('power2', null);\n    context.set('energy1', null);\n    context.set('energy2', null);\n    context.set('timestamp1', null);\n    context.set('timestamp2', null);\n\n    // Log the output for debugging\n    node.warn(\"Outputting total values: \" + JSON.stringify(msg.payload));\n\n    return msg;\n}\n\n// Log if not all values are received yet\nnode.warn(\"Waiting for all meter data to be received...\");\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "366983f4fd0b645f",
                "6d58050f0a1f4d08",
                "6a5a64cd1a50140a",
                "ff82b590d4a2a259",
                "e47159f8a0f3aec3"
            ]
        ]
    },
    {
        "id": "bed20e973f40a51f",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 100,
        "wires": []
    },
    {
        "id": "366983f4fd0b645f",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "6d58050f0a1f4d08",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "Average Power Calculation",
        "func": "let currentKWh = msg.payload.totalEnergy;  // Energy in kWh (scaled in Arduino)\nlet currentTime = msg.payload.timestamp;\n\n// Retrieve previously stored values\nlet previousKWh = context.get(\"previousKWh\");\nlet previousTime = context.get(\"previousTime\");\n\n// If this is the first run, initialize previous values\nif (previousKWh === undefined || previousTime === undefined) {\n    node.warn(\"First cycle: Initializing previousKWh and previousTime.\");\n    context.set(\"previousKWh\", currentKWh);\n    context.set(\"previousTime\", currentTime);\n    return null;  // Skip calculation on the first run\n}\n\n// Calculate time difference in hours\nlet timeDifference = (currentTime - previousTime) / (1000 * 3600);  // Convert ms to hours\nif (timeDifference <= 0) {\n    node.warn(\"Invalid time difference. Skipping average power calculation.\");\n    return null;\n}\n\n// Calculate average power in Watts\nlet energyDifference = currentKWh - previousKWh;  // Energy difference in kWh\nlet averagePowerW = energyDifference / timeDifference * 1000;  // Power in Watts\n\n// Update context for the next cycle\ncontext.set(\"previousKWh\", currentKWh);\ncontext.set(\"previousTime\", currentTime);\n\n// Output the average power in Watts\nmsg.payload = {\n    averagePowerW: parseFloat(averagePowerW.toFixed(3)),  // Retain 3 decimals for Watts\n    currentKWh: currentKWh,\n    previousKWh: previousKWh,\n    timeDifference: timeDifference\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "73ca1c8fe4981402",
                "3046c6e76a3578f5"
            ]
        ]
    },
    {
        "id": "73ca1c8fe4981402",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 180,
        "wires": []
    },
    {
        "id": "3046c6e76a3578f5",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "Average Power Chart",
        "func": "msg.payload = msg.payload.averagePowerW;  // Extract average power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 340,
        "wires": [
            [
                "a52b631e9983c425",
                "730938280f0e8085"
            ]
        ]
    },
    {
        "id": "a52b631e9983c425",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Average Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9838744108786c4d",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 9,
        "width": 0,
        "height": 0,
        "label": "Current Power",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 600,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "6a5a64cd1a50140a",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "total power",
        "func": "msg.payload = msg.payload.totalPower;  // Extract total power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "9838744108786c4d"
            ]
        ]
    },
    {
        "id": "ff82b590d4a2a259",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 16",
        "func": "msg.payload = msg.payload.totalEnergy;  // Extract average power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "d1bc7094a5769fef"
            ]
        ]
    },
    {
        "id": "d1bc7094a5769fef",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Total Energy",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "e47159f8a0f3aec3",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "Energy Totals",
        "func": "// Configuration\nconst ENERGY_RATE = 0.18; // Cost per kWh in dollars\nconst TIMEZONE_OFFSET_HOURS = -5; // Eastern Time is UTC-5\n\n// Retrieve stored values from context\nlet startOfDayEnergy = context.get('startOfDayEnergy');\nlet startOfMonthEnergy = context.get('startOfMonthEnergy');\nlet previousTotalEnergy = context.get('previousTotalEnergy') || 0;\nlet lastDay = context.get('lastDay');\nlet lastMonth = context.get('lastMonth');\n\n// Get the current timestamp\nlet now = new Date();\nlet utcHours = now.getUTCHours();\nlet utcDay = now.getUTCDate();\nlet utcMonth = now.getUTCMonth();\n\n// Calculate Eastern Time (ET) day and month\nlet etHours = utcHours + TIMEZONE_OFFSET_HOURS;\nlet etDay = utcDay;\nlet etMonth = utcMonth;\n\n// Adjust ET day and month for timezone shifts\nif (etHours < 0) {\n    etHours += 24;\n    etDay -= 1;\n} else if (etHours >= 24) {\n    etHours -= 24;\n    etDay += 1;\n}\n\nif (etDay < 1) {\n    etMonth -= 1;\n    etDay = new Date(now.getUTCFullYear(), etMonth + 1, 0).getDate();\n} else if (etDay > new Date(now.getUTCFullYear(), etMonth + 1, 0).getDate()) {\n    etMonth += 1;\n    etDay = 1;\n}\n\n// Retrieve the total energy from the MQTT message\nlet totalEnergy = msg.payload.totalEnergy; // Total cumulative energy in kWh\n\n// Initialize start-of-day and start-of-month values if missing\nif (startOfDayEnergy === undefined || lastDay === undefined) {\n    startOfDayEnergy = totalEnergy;\n    lastDay = etDay;\n    context.set('startOfDayEnergy', startOfDayEnergy);\n    context.set('lastDay', lastDay);\n    node.warn(\"Initialized start-of-day energy.\");\n}\n\nif (startOfMonthEnergy === undefined || lastMonth === undefined) {\n    startOfMonthEnergy = totalEnergy;\n    lastMonth = etMonth;\n    context.set('startOfMonthEnergy', startOfMonthEnergy);\n    context.set('lastMonth', lastMonth);\n    node.warn(\"Initialized start-of-month energy.\");\n}\n\n// Check for a new day and reset daily energy\nif (etDay !== lastDay) {\n    startOfDayEnergy = totalEnergy; // Reset start of day\n    lastDay = etDay;\n    context.set('startOfDayEnergy', startOfDayEnergy);\n    context.set('lastDay', lastDay);\n    node.warn(`New day detected. Resetting start-of-day energy to: ${startOfDayEnergy}`);\n}\n\n// Check for a new month and reset monthly energy\nif (etMonth !== lastMonth) {\n    startOfMonthEnergy = totalEnergy; // Reset start of month\n    lastMonth = etMonth;\n    context.set('startOfMonthEnergy', startOfMonthEnergy);\n    context.set('lastMonth', lastMonth);\n    node.warn(`New month detected. Resetting start-of-month energy to: ${startOfMonthEnergy}`);\n}\n\n// Calculate daily and monthly energy usage\nlet dailyEnergy = totalEnergy - startOfDayEnergy;\nlet monthlyEnergy = totalEnergy - startOfMonthEnergy;\n\n// Ensure no negative values due to resets\nif (dailyEnergy < 0) {\n    node.warn(\"Negative daily energy detected. Resetting to 0.\");\n    dailyEnergy = 0;\n}\n\nif (monthlyEnergy < 0) {\n    node.warn(\"Negative monthly energy detected. Resetting to 0.\");\n    monthlyEnergy = 0;\n}\n\n// Update the previous total energy for monthly calculations\nlet energyDifference = totalEnergy - previousTotalEnergy;\nif (energyDifference < 0) {\n    node.warn(\"Energy difference is negative. Ignoring this update.\");\n    energyDifference = 0;\n}\ncontext.set('previousTotalEnergy', totalEnergy);\n\n// Calculate monthly cost\nlet monthlyCost = monthlyEnergy * ENERGY_RATE;\n\n// Save updated values to context\ncontext.set('dailyEnergy', dailyEnergy);\ncontext.set('monthlyEnergy', monthlyEnergy);\n\n// Output results\nmsg.payload = {\n    dailyEnergy: parseFloat(dailyEnergy.toFixed(3)), // Retain 3 decimals for kWh\n    monthlyEnergy: parseFloat(monthlyEnergy.toFixed(3)), // Retain 3 decimals for kWh\n    monthlyCost: parseFloat(monthlyCost.toFixed(2)), // Retain 2 decimals for cost\n    timestampET: `${etDay}/${etMonth + 1} ${etHours}:${now.getUTCMinutes().toString().padStart(2, '0')}`\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "9ff68cfd86ee1d4a",
                "3de4a8d87064d62e",
                "2f830a23c46ba278"
            ]
        ]
    },
    {
        "id": "9ff68cfd86ee1d4a",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 17",
        "func": "msg.payload = msg.payload.dailyEnergy;  \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 620,
        "wires": [
            [
                "0cd3aad1f08507e9",
                "87d98865493e4bbd",
                "416f05dbea2d4248"
            ]
        ]
    },
    {
        "id": "3de4a8d87064d62e",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 18",
        "func": "msg.payload = msg.payload.monthlyEnergy;  // Extract average power in Watts\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "610c4147e508dd3e",
                "2e070e1beddedf62"
            ]
        ]
    },
    {
        "id": "2f830a23c46ba278",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "function 19",
        "func": "msg.payload = msg.payload.monthlyCost;  \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 740,
        "wires": [
            [
                "7ce05717135fc812",
                "27020bb429cd6f8a"
            ]
        ]
    },
    {
        "id": "0cd3aad1f08507e9",
        "type": "ui_chart",
        "z": "3eb223b4b2c18a36",
        "name": "",
        "group": "1d800e36fbc4ac7b",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Daily Energy",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "610c4147e508dd3e",
        "type": "ui_text",
        "z": "3eb223b4b2c18a36",
        "group": "1d800e36fbc4ac7b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Monthly Energy",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 680,
        "wires": []
    },
    {
        "id": "7ce05717135fc812",
        "type": "ui_text",
        "z": "3eb223b4b2c18a36",
        "group": "1d800e36fbc4ac7b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Monthly Cost",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 740,
        "wires": []
    },
    {
        "id": "87d98865493e4bbd",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "2e070e1beddedf62",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 640,
        "wires": []
    },
    {
        "id": "27020bb429cd6f8a",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 720,
        "wires": []
    },
    {
        "id": "416f05dbea2d4248",
        "type": "influxdb out",
        "z": "3eb223b4b2c18a36",
        "influxdb": "472e17de7ee4e7eb",
        "name": "daily_energy",
        "measurement": "daily_energy",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1010,
        "y": 560,
        "wires": []
    },
    {
        "id": "inject_weather",
        "type": "inject",
        "z": "3eb223b4b2c18a36",
        "name": "Every 15 min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "900",
        "once": true,
        "onceDelay": 0.1,
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 940,
        "wires": [
            [
                "weather_api"
            ]
        ]
    },
    {
        "id": "weather_api",
        "type": "openweathermap",
        "z": "3eb223b4b2c18a36",
        "name": "Weather - 16744",
        "wtype": "current",
        "lon": "-78.5511",
        "lat": "41.8834",
        "city": "",
        "country": "",
        "language": "en",
        "x": 400,
        "y": 940,
        "wires": [
            [
                "format_line_protocol"
            ]
        ]
    },
    {
        "id": "format_line_protocol",
        "type": "function",
        "z": "3eb223b4b2c18a36",
        "name": "Line Protocol Format",
        "func": "const temp = msg.payload.tempc;\nconst humidity = msg.payload.humidity;\nconst wind = msg.payload.windspeed;\n\nmsg.payload = `weather_api temp_outside=${temp},humidity=${humidity},windspeed=${wind}`;\nmsg.headers = {\n    \"Content-Type\": \"text/plain\"\n};\nreturn msg;",
        "outputs": 1,
        "x": 640,
        "y": 940,
        "wires": [
            [
                "http_to_influx"
            ]
        ]
    },
    {
        "id": "http_to_influx",
        "type": "http request",
        "z": "3eb223b4b2c18a36",
        "name": "POST to InfluxDB",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:8086/write?db=sensors&u=robinborland&p=robin16749%23",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 880,
        "y": 940,
        "wires": [
            [
                "debug_response"
            ]
        ]
    },
    {
        "id": "debug_response",
        "type": "debug",
        "z": "3eb223b4b2c18a36",
        "name": "Influx Response",
        "active": true,
        "console": false,
        "complete": "true",
        "x": 1110,
        "y": 940,
        "wires": []
    },
    {
        "id": "730938280f0e8085",
        "type": "influxdb out",
        "z": "3eb223b4b2c18a36",
        "influxdb": "472e17de7ee4e7eb",
        "name": "average_power",
        "measurement": "average_power",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1020,
        "y": 400,
        "wires": []
    },
    {
        "id": "b18fe1f1e14995ca",
        "type": "mqtt in",
        "z": "995e9f07907fb18f",
        "name": "",
        "topic": "SIM7000G/integra_dev",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9bc2bdeec0865a21",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 360,
        "wires": [
            [
                "7b14336e4bb5b96b",
                "352fc4815d50d8a9",
                "46de924965461464",
                "00cdd20118d6270c"
            ]
        ]
    },
    {
        "id": "7b14336e4bb5b96b",
        "type": "function",
        "z": "995e9f07907fb18f",
        "name": "function 13",
        "func": "// Extract latitude and longitude from the incoming payload\nlet latitude = msg.payload.state.reported.latitude;\nlet longitude = msg.payload.state.reported.longitude;\n\n// Check if latitude and longitude are present\nif (latitude && longitude) {\n    // Generate a Google Maps URL using the GPS coordinates\n    msg.payload = `https://www.google.com/maps?q=${latitude},${longitude}`;\n} else {\n    msg.payload = \"Coordinates not available.\";\n}\n\n// Return the modified message with the Google Maps link\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "88a3505eaea158bd"
            ]
        ]
    },
    {
        "id": "352fc4815d50d8a9",
        "type": "function",
        "z": "995e9f07907fb18f",
        "name": "function 14",
        "func": "msg.payload = msg.payload.state.reported.temperature\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 320,
        "wires": [
            [
                "1d87e8a21f8fbaaa"
            ]
        ]
    },
    {
        "id": "1d87e8a21f8fbaaa",
        "type": "ui_chart",
        "z": "995e9f07907fb18f",
        "name": "temp sim 7000g",
        "group": "a206d81b.bc8288",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Temperature sim 7000g",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "12",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "88a3505eaea158bd",
        "type": "ui_template",
        "z": "995e9f07907fb18f",
        "group": "a206d81b.bc8288",
        "name": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<div style=\"text-align: center; padding: 10px;\">\n    <a href=\"{{msg.payload}}\" target=\"_blank\">Open Location on Google Maps</a>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "46de924965461464",
        "type": "debug",
        "z": "995e9f07907fb18f",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 220,
        "wires": []
    },
    {
        "id": "78a38d0690e1c90c",
        "type": "ui_chart",
        "z": "995e9f07907fb18f",
        "name": "humidity sim 7000g",
        "group": "a206d81b.bc8288",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "humidity sim7000g",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "00cdd20118d6270c",
        "type": "function",
        "z": "995e9f07907fb18f",
        "name": "function 15",
        "func": "msg.payload = msg.payload.state.reported.humidity\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 280,
        "wires": [
            [
                "78a38d0690e1c90c"
            ]
        ]
    },
    {
        "id": "aa6df6911dd8c2ce",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 6",
        "func": "// Ensure payload structure is valid\nif (msg.payload && msg.payload.PayloadData && msg.payload.WirelessMetadata && msg.payload.WirelessMetadata.LoRaWAN) {\n    try {\n        // Decode the PayloadData from Base64 to hex\n        let rawPayload = Buffer.from(msg.payload.PayloadData, 'base64').toString('hex');\n        msg.payload.rawPayload = rawPayload;\n\n        // Extract DevEui\n        let devEui = msg.payload.WirelessMetadata.LoRaWAN.DevEui;\n        msg.payload.devEui = devEui;\n\n        node.warn(`Decoded PayloadData: ${rawPayload}`);\n        node.warn(`DevEui: ${devEui}`);\n        return msg; // Pass the message along\n    } catch (error) {\n        node.error(\"Error decoding PayloadData: \" + error.message);\n        return null; // Stop further processing\n    }\n} else {\n    node.error(\"PayloadData or WirelessMetadata is missing or invalid.\");\n    return null; // Stop further processing\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [
            [
                "4bcfe6a39435e0d0",
                "7c755697cee76bee"
            ]
        ]
    },
    {
        "id": "4bcfe6a39435e0d0",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 100,
        "wires": []
    },
    {
        "id": "7c755697cee76bee",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 7",
        "func": "if (msg.payload && msg.payload.rawPayload && msg.payload.devEui === \"2cf7f1c044900188\") {\n    try {\n        let rawPayload = Buffer.from(msg.payload.rawPayload, 'hex');\n\n        // Log the payload length for debugging\n        node.warn(`Payload Length: ${rawPayload.length}, Payload: ${rawPayload.toString('hex')}`);\n\n        // Define valid payload length for decoding\n        const VALID_LENGTH = 11;\n\n        // Check payload length\n        if (rawPayload.length !== VALID_LENGTH) {\n            node.warn(`Ignoring payload with invalid length (${rawPayload.length}): ${rawPayload.toString('hex')}`);\n            return null;\n        }\n\n        // Decode temperature (offset 5)\n        let tempRaw = rawPayload.readUInt16BE(5);\n        let decodedTemp = tempRaw / 1000.0;\n\n        // Decode humidity (offset 9)\n        let humRaw = rawPayload.readUInt16BE(9);\n        let decodedHum = humRaw / 1000.0;\n\n        // Log decoded values for debugging\n        node.warn(`Decoded Temp: ${decodedTemp}, Decoded Hum: ${decodedHum}`);\n\n        // Update payload with decoded values\n        msg.payload.decodedTemp = decodedTemp;\n        msg.payload.decodedHum = decodedHum;\n\n        return msg;\n    } catch (error) {\n        node.error(\"Error decoding payload: \" + error.message);\n        return null;\n    }\n} else {\n    node.warn(\"Ignoring message from unknown or invalid source.\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "d11011baf862ba6d",
                "b2c9e96acd3f2df4",
                "a56fc1ccc3d3ed8b"
            ]
        ]
    },
    {
        "id": "d11011baf862ba6d",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "46586140170a6fe1",
        "type": "mqtt in",
        "z": "c2a858310637da2c",
        "name": "SenseCap",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "aa6df6911dd8c2ce",
                "7ab7681e01f660f2",
                "50f56e0495a47a57"
            ]
        ]
    },
    {
        "id": "b2c9e96acd3f2df4",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 8",
        "func": "msg.payload = msg.payload.decodedTemp\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 280,
        "wires": [
            [
                "2da3104d549a1730",
                "3304361d7b635c86",
                "b1dd9203dd91114f"
            ]
        ]
    },
    {
        "id": "a56fc1ccc3d3ed8b",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 9",
        "func": "msg.payload = msg.payload.decodedHum\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "0602ab20c5b41e56",
                "ad435ae73a80c0a6",
                "d9577518a8dd40e0"
            ]
        ]
    },
    {
        "id": "0602ab20c5b41e56",
        "type": "ui_chart",
        "z": "c2a858310637da2c",
        "name": "Humidity",
        "group": "a206d81b.bc8288",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Humidity LoraWAN AWS",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2da3104d549a1730",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 220,
        "wires": []
    },
    {
        "id": "ad435ae73a80c0a6",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "1d217cdc21b925d0",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 10",
        "func": "// Ensure payload structure is valid\nif (msg.payload && msg.payload.PayloadData && msg.payload.WirelessMetadata && msg.payload.WirelessMetadata.LoRaWAN) {\n    try {\n        // Decode the PayloadData from Base64 to hex\n        let rawPayload = Buffer.from(msg.payload.PayloadData, 'base64').toString('hex');\n        msg.payload.rawPayload = rawPayload;\n\n        // Extract DevEui\n        let devEui = msg.payload.WirelessMetadata.LoRaWAN.DevEui;\n        msg.payload.devEui = devEui;\n\n        node.warn(`Decoded PayloadData: ${rawPayload}`);\n        node.warn(`DevEui: ${devEui}`);\n        return msg; // Pass the message along\n    } catch (error) {\n        node.error(\"Error decoding PayloadData: \" + error.message);\n        return null; // Stop further processing\n    }\n} else {\n    node.error(\"PayloadData or WirelessMetadata is missing or invalid.\");\n    return null; // Stop further processing\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": [
            [
                "88c27f72022a6583",
                "4ac38b01724c3963"
            ]
        ]
    },
    {
        "id": "88c27f72022a6583",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 600,
        "wires": []
    },
    {
        "id": "4ac38b01724c3963",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 11",
        "func": "if (msg.payload && msg.payload.rawPayload && msg.payload.devEui) {\n    try {\n        const validDevEui = \"2cf7f1c05300027e\"; // Replace with the DevEui of your pH sensor\n        const rawPayload = Buffer.from(msg.payload.rawPayload, 'hex');\n\n        // Validate DevEui\n        if (msg.payload.devEui.toLowerCase() !== validDevEui.toLowerCase()) {\n            node.warn(`Ignoring message from unknown DevEui: ${msg.payload.devEui}`);\n            return null;\n        }\n\n        // Check for valid payload length\n        if (rawPayload.length !== 11) { // Enforce length of 11 bytes for valid messages\n            node.warn(`Ignoring payload with invalid length (${rawPayload.length}): ${rawPayload.toString('hex')}`);\n            return null;\n        }\n\n        // Decode pH value using fixed offset 5\n        const phRaw = rawPayload.readUInt16BE(5);\n        const decodedPh = phRaw / 1000.0; // Adjust scaling for pH sensor\n\n        // Attach decoded value to payload\n        msg.payload.decodedPh = decodedPh;\n\n        return msg;\n\n    } catch (error) {\n        node.error(\"Error decoding payload: \" + error.message);\n        return null;\n    }\n} else {\n    node.error(\"Raw payload or DevEui is missing or invalid.\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 680,
        "wires": [
            [
                "a8b3299e50188408",
                "67a428201dd4666f"
            ]
        ]
    },
    {
        "id": "a8b3299e50188408",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 680,
        "wires": []
    },
    {
        "id": "8125ba4dbefb4fe4",
        "type": "mqtt in",
        "z": "c2a858310637da2c",
        "name": "SenseCap",
        "topic": "devices/prototypes/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "b7b7292ec88ec8e7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 680,
        "wires": [
            [
                "1d217cdc21b925d0"
            ]
        ]
    },
    {
        "id": "67a428201dd4666f",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 12",
        "func": "msg.payload = msg.payload.decodedPh\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 780,
        "wires": [
            [
                "193af9b7607362f4",
                "89d4bd216d4ba07c",
                "7af12b825150505e"
            ]
        ]
    },
    {
        "id": "193af9b7607362f4",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 740,
        "wires": []
    },
    {
        "id": "7ab7681e01f660f2",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 180,
        "wires": []
    },
    {
        "id": "89d4bd216d4ba07c",
        "type": "influxdb out",
        "z": "c2a858310637da2c",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Ph",
        "measurement": "Ph",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 810,
        "y": 820,
        "wires": []
    },
    {
        "id": "d9577518a8dd40e0",
        "type": "influxdb out",
        "z": "c2a858310637da2c",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Humidity",
        "measurement": "Humidity",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 840,
        "y": 380,
        "wires": []
    },
    {
        "id": "3304361d7b635c86",
        "type": "influxdb out",
        "z": "c2a858310637da2c",
        "influxdb": "472e17de7ee4e7eb",
        "name": "Temperature",
        "measurement": "Temperature",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 850,
        "y": 300,
        "wires": []
    },
    {
        "id": "b1dd9203dd91114f",
        "type": "ui_chart",
        "z": "c2a858310637da2c",
        "name": "Temp",
        "group": "a206d81b.bc8288",
        "order": 27,
        "width": 0,
        "height": 0,
        "label": "Temp LoraWan AWS",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7af12b825150505e",
        "type": "ui_chart",
        "z": "c2a858310637da2c",
        "name": "pH",
        "group": "a206d81b.bc8288",
        "order": 29,
        "width": 0,
        "height": 0,
        "label": "pH LoraWan  AWS",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "50f56e0495a47a57",
        "type": "function",
        "z": "c2a858310637da2c",
        "name": "function 4",
        "func": "// Base64 decode the PayloadData let decodedPayload = Buffer.from(msg.payload.PayloadData, 'base64'); // Convert raw payload data to readable values, adapt based on sensor documentation \nlet rawPayload = msg.payload.WirelessMetadata.LoRaWAN.rawPayload; // Example of parsing, assume the first byte is a status, the next two bytes are a value, etc. let status = decodedPayload.readUInt8(0); \nlet temperature = decodedPayload.readUInt16BE(1) / 100; // Assuming two bytes for temperature // Assign decoded values back to msg object \nmsg.payload = { status: status, temperature: temperature, rawPayload: rawPayload }; \nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 2,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 320,
        "wires": [
            [
                "739b0d4a9fdcd39e"
            ]
        ]
    },
    {
        "id": "739b0d4a9fdcd39e",
        "type": "debug",
        "z": "c2a858310637da2c",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 380,
        "wires": []
    },
    {
        "id": "f4b439e40badd0f7",
        "type": "mqtt in",
        "z": "63e7003c1b5f41d1",
        "name": "",
        "topic": "bme688/readings",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "77451fd2a6039a7d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "eb4656fdf9d7054f",
                "cf3badcf9084d08b",
                "c927402165a16384",
                "9315950cbf5b0439"
            ]
        ]
    },
    {
        "id": "eb4656fdf9d7054f",
        "type": "debug",
        "z": "63e7003c1b5f41d1",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "cf3badcf9084d08b",
        "type": "function",
        "z": "63e7003c1b5f41d1",
        "name": "function 43",
        "func": "msg.payload = msg.payload.iaq_accuracy\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 320,
        "wires": [
            [
                "4e8c922991232810"
            ]
        ]
    },
    {
        "id": "c927402165a16384",
        "type": "function",
        "z": "63e7003c1b5f41d1",
        "name": "function 44",
        "func": "msg.payload = msg.payload.sensor_1\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "89ab788f6e0afc3d"
            ]
        ]
    },
    {
        "id": "4e8c922991232810",
        "type": "ui_chart",
        "z": "63e7003c1b5f41d1",
        "name": "IAQ Accuracy 0-3",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "IAQ Accuracy 0-3",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "89ab788f6e0afc3d",
        "type": "ui_chart",
        "z": "63e7003c1b5f41d1",
        "name": "IAQ ",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "IAQ ",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "9315950cbf5b0439",
        "type": "function",
        "z": "63e7003c1b5f41d1",
        "name": "function 49",
        "func": "// Define known odor signatures based on gas resistance (Ohms)\nlet odorSignatures = [\n    { name: \"Coffee\", min: 45000, max: 55000 },\n    { name: \"Vinegar\", min: 58000, max: 64000 },\n    { name: \"Acetone\", min: 30000, max: 42000 },\n    { name: \"Fermenting Wine\", min: 50000, max: 65000 },\n    { name: \"Background Air\", min: 70000, max: 90000 }\n];\n\n// Extract gas resistance value from MQTT payload\nlet gasResistance = parseFloat(msg.payload.sensor_9);  // Adjust based on the correct sensor ID\n\n// Compare with known signatures\nlet detectedOdor = \"Unknown\";\nfor (let odor of odorSignatures) {\n    if (gasResistance >= odor.min && gasResistance <= odor.max) {\n        detectedOdor = odor.name;\n        break;\n    }\n}\n\n// Create an MQTT message with identified substance\nmsg.payload = { \"Detected_Odor\": detectedOdor, \"Gas_Resistance\": gasResistance };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 500,
        "wires": [
            [
                "44b20c19a5a51d66",
                "dd320c64e69aeb08"
            ]
        ]
    },
    {
        "id": "44b20c19a5a51d66",
        "type": "mqtt out",
        "z": "63e7003c1b5f41d1",
        "name": "bme688/detected_odor",
        "topic": "bme688/detected_odor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "77451fd2a6039a7d",
        "x": 830,
        "y": 500,
        "wires": []
    },
    {
        "id": "dd320c64e69aeb08",
        "type": "debug",
        "z": "63e7003c1b5f41d1",
        "name": "debug 59",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 580,
        "wires": []
    },
    {
        "id": "160be1557147dbb7",
        "type": "mqtt in",
        "z": "93e42c3ecec6d081",
        "name": "",
        "topic": "bme688/data/classification",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "64b04872b5f80a02",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "096ee8a5d2486198",
                "f86c1821de1e6683",
                "967c85db2fdf89b6"
            ]
        ]
    },
    {
        "id": "096ee8a5d2486198",
        "type": "debug",
        "z": "93e42c3ecec6d081",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "f86c1821de1e6683",
        "type": "function",
        "z": "93e42c3ecec6d081",
        "name": "function 1",
        "func": "msg.payload = msg.payload.class1\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "1f96bed5035f1c9b",
                "0dd3de574cd1cc4f"
            ]
        ]
    },
    {
        "id": "967c85db2fdf89b6",
        "type": "function",
        "z": "93e42c3ecec6d081",
        "name": "function 2",
        "func": "msg.payload = msg.payload.class2\nvar num = parseFloat(msg.payload);\nmsg.payload = num;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "6217e4aec5d055b4",
                "474b97c8d27bfd79"
            ]
        ]
    },
    {
        "id": "1f96bed5035f1c9b",
        "type": "ui_chart",
        "z": "93e42c3ecec6d081",
        "name": "Class1%",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "class1 %",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 680,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "6217e4aec5d055b4",
        "type": "ui_chart",
        "z": "93e42c3ecec6d081",
        "name": "Class2%",
        "group": "a206d81b.bc8288",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "class2 %",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 680,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "0dd3de574cd1cc4f",
        "type": "ui_text",
        "z": "93e42c3ecec6d081",
        "group": "a206d81b.bc8288",
        "order": 22,
        "width": 0,
        "height": 0,
        "name": "class1",
        "label": "class1",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "474b97c8d27bfd79",
        "type": "ui_text",
        "z": "93e42c3ecec6d081",
        "group": "a206d81b.bc8288",
        "order": 22,
        "width": 0,
        "height": 0,
        "name": "class2",
        "label": "class2",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 500,
        "wires": []
    },
    {
        "id": "get_authorizations",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Start Demo Flow",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "auth_request"
            ]
        ]
    },
    {
        "id": "auth_request",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /authorizations",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/authorizations",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 380,
        "y": 260,
        "wires": [
            [
                "pick_auth"
            ]
        ]
    },
    {
        "id": "pick_auth",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "Get Most Recent Auth UID",
        "func": "msg.auth_uid = \"508249\";  // Replace with your confirmed UID\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "get_meters_from_auth"
            ]
        ]
    },
    {
        "id": "get_meters_from_auth",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /authorizations/{uid}/meters",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/authorizations/{{auth_uid}}/meters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 870,
        "y": 140,
        "wires": [
            [
                "extract_meter_uid"
            ]
        ]
    },
    {
        "id": "extract_meter_uid",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "Extract mtr UID",
        "func": "const meters = msg.payload.meters;\nif (!meters || meters.length === 0) {\n    node.error(\"No meters found\");\n    return null;\n}\nconst meter = meters[0];\nmsg.meter_uid = meter.uid;\nmsg.payload = {}; // for POST\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 340,
        "wires": [
            [
                "activate_meter"
            ]
        ]
    },
    {
        "id": "activate_meter",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "POST /meters/{uid}/collect",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/meters/{{meter_uid}}/collect",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 980,
        "y": 540,
        "wires": [
            [
                "final_debug"
            ]
        ]
    },
    {
        "id": "influx_inject_test",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Inject Test Reading",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 2000,
        "wires": [
            [
                "influx_build_request"
            ]
        ]
    },
    {
        "id": "influx_build_request",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "Build Influx Line Protocol",
        "func": "// InfluxDB line protocol format\nconst measurement = \"usage\";\nconst tag = \"meter_uid=test_meter_001\";\nconst field = \"kwh=1.23\";  // must be a number, not a string\nconst timestamp = Date.now() * 1e6; // in nanoseconds\n\nmsg.payload = `${measurement},${tag} ${field} ${timestamp}`;\n\n// Set headers and URL with auth\nmsg.headers = {\n    \"Content-Type\": \"text/plain\"\n};\nmsg.method = \"POST\";\nmsg.url = \"http://localhost:8086/write?db=meters_electric&u=robinborland&p=robin16749#\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2000,
        "wires": [
            [
                "influx_http_write",
                "influx_debug"
            ]
        ]
    },
    {
        "id": "influx_http_write",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "Write to Influx via HTTP",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://localhost:8086/write?db=meters_electric&u=robinborland&p=robin16749%23",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 2000,
        "wires": [
            [
                "influx_debug_response"
            ]
        ]
    },
    {
        "id": "influx_debug",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "Inspect Line Protocol",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 500,
        "y": 2060,
        "wires": []
    },
    {
        "id": "influx_debug_response",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "InfluxDB Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 2060,
        "wires": []
    },
    {
        "id": "b2211119201e3f6e",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Fetch Daily - 1857762",
        "props": [],
        "repeat": "",
        "crontab": "30 6 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 210,
        "y": 2180,
        "wires": [
            [
                "dba4b33c7d830498"
            ]
        ]
    },
    {
        "id": "dba4b33c7d830498",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /intervals 1857762",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/intervals?meters=1857762",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 440,
        "y": 2180,
        "wires": [
            [
                "49f8c02848c1a0f4"
            ]
        ]
    },
    {
        "id": "49f8c02848c1a0f4",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "To Influx Line Protocol",
        "func": "const intervals = msg.payload.intervals;\nif (!intervals || intervals.length === 0) {\n    node.warn(\"No interval data found\");\n    return null;\n}\n\nlet lines = [];\nintervals.forEach(interval => {\n    const meter_uid = interval.meter_uid;\n    (interval.readings || []).forEach(reading => {\n        const ts_ns = new Date(reading.start).getTime() * 1e6;\n        const line = `usage,meter_uid=${meter_uid} kwh=${reading.kwh} ${ts_ns}`;\n        lines.push(line);\n    });\n});\n\nmsg.payload = lines.join(\"\\n\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2180,
        "wires": [
            [
                "0bd8efc331554a36",
                "2fa44664e3e76b35"
            ]
        ]
    },
    {
        "id": "0bd8efc331554a36",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "POST to InfluxDB",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://localhost:8086/write?db=meters_electric&u=robinborland&p=robin16749%23",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 2180,
        "wires": [
            [
                "7a301bf888dde506"
            ]
        ]
    },
    {
        "id": "2fa44664e3e76b35",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "Line Protocol Output",
        "active": true,
        "tosidebar": true,
        "complete": "payload",
        "targetType": "msg",
        "x": 730,
        "y": 2240,
        "wires": []
    },
    {
        "id": "7a301bf888dde506",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "InfluxDB Response",
        "active": true,
        "tosidebar": true,
        "complete": "true",
        "targetType": "full",
        "x": 980,
        "y": 2240,
        "wires": []
    },
    {
        "id": "85a9188125fc541b",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Fetch Daily - 1857755",
        "props": [],
        "repeat": "",
        "crontab": "30 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 2400,
        "wires": [
            [
                "3db99e050cea2c6b"
            ]
        ]
    },
    {
        "id": "3db99e050cea2c6b",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /intervals 1857755",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/intervals?meters=1857755",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 420,
        "y": 2400,
        "wires": [
            [
                "bdb8e5adac599254"
            ]
        ]
    },
    {
        "id": "bdb8e5adac599254",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "To Influx Line Protocol",
        "func": "const intervals = msg.payload.intervals;\nif (!intervals || intervals.length === 0) {\n    node.warn(\"No interval data found\");\n    return null;\n}\n\nlet lines = [];\nintervals.forEach(interval => {\n    const meter_uid = interval.meter_uid;\n    (interval.readings || []).forEach(reading => {\n        const ts_ns = new Date(reading.start).getTime() * 1e6;\n        const line = `usage,meter_uid=${meter_uid} kwh=${reading.kwh} ${ts_ns}`;\n        lines.push(line);\n    });\n});\n\nmsg.payload = lines.join(\"\\n\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2400,
        "wires": [
            [
                "32970b0c1661ee12",
                "6e74af6d993ac7a2"
            ]
        ]
    },
    {
        "id": "32970b0c1661ee12",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "POST to InfluxDB",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://localhost:8086/write?db=meters_electric&u=robinborland&p=robin16749%23",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 2400,
        "wires": [
            [
                "3a679b10caabaf4c"
            ]
        ]
    },
    {
        "id": "6e74af6d993ac7a2",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "Line Protocol Output",
        "active": true,
        "tosidebar": true,
        "complete": "payload",
        "targetType": "msg",
        "x": 710,
        "y": 2460,
        "wires": []
    },
    {
        "id": "3a679b10caabaf4c",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "InfluxDB Response",
        "active": true,
        "tosidebar": true,
        "complete": "true",
        "targetType": "full",
        "x": 960,
        "y": 2460,
        "wires": []
    },
    {
        "id": "final_debug",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "Meter Activated",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1040,
        "y": 660,
        "wires": []
    },
    {
        "id": "inject_step3",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Get Meters",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 240,
        "y": 700,
        "wires": [
            [
                "http_step3"
            ]
        ]
    },
    {
        "id": "http_step3",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /api/v2/meters",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/meters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 440,
        "y": 700,
        "wires": [
            [
                "debug_step3"
            ]
        ]
    },
    {
        "id": "debug_step3",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "Meter Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 640,
        "y": 700,
        "wires": []
    },
    {
        "id": "inject_uid_508244",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Get Meter UIDs (508244)",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 250,
        "y": 820,
        "wires": [
            [
                "http_508244"
            ]
        ]
    },
    {
        "id": "http_508244",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /auth/508244/meters",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/meters?authorizations=508244",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 520,
        "y": 820,
        "wires": [
            [
                "debug_uid_244"
            ]
        ]
    },
    {
        "id": "debug_uid_244",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "Meters from 508244",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 820,
        "wires": []
    },
    {
        "id": "inject_uid_508249",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Get Meter UIDs (508249)",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 250,
        "y": 900,
        "wires": [
            [
                "http_508249"
            ]
        ]
    },
    {
        "id": "http_508249",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /auth/508249/meters",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/meters?authorizations=508249",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 520,
        "y": 900,
        "wires": [
            [
                "debug_uid_249"
            ]
        ]
    },
    {
        "id": "debug_uid_249",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "Meters from 508249",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 900,
        "wires": []
    },
    {
        "id": "a7e81879dde8b282",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1600,
        "wires": []
    },
    {
        "id": "f7d7814ce7259e58",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1600,
        "wires": []
    },
    {
        "id": "c10806dcc40fda73",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Daily Trigger (6:30 AM)",
        "props": [],
        "repeat": "",
        "crontab": "30 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "149beb56871bb81e"
            ]
        ]
    },
    {
        "id": "149beb56871bb81e",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET /intervals?meters=1857762",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/intervals?meters=1857762",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "a06c7bda45dee837"
            ]
        ]
    },
    {
        "id": "a06c7bda45dee837",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "Extract Readings",
        "func": "const intervalData = msg.payload.intervals;\nif (!intervalData || intervalData.length === 0) {\n    node.warn(\"No interval blocks found\");\n    return null;\n}\n\nlet readings = [];\nintervalData.forEach(interval => {\n    if (interval.readings && interval.readings.length > 0) {\n        interval.readings.forEach(r => {\n            readings.push({\n                meter_uid: interval.meter_uid,\n                timestamp: r.start,\n                kwh: r.kwh\n            });\n        });\n    }\n});\n\nmsg.payload = readings;\nreturn msg;",
        "outputs": 1,
        "x": 650,
        "y": 1120,
        "wires": [
            [
                "19016ec7018cd5a7"
            ]
        ]
    },
    {
        "id": "19016ec7018cd5a7",
        "type": "split",
        "z": "481f96d21d18f9be",
        "name": "Split Each Reading",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 870,
        "y": 1120,
        "wires": [
            [
                "09606b2801a86d4a"
            ]
        ]
    },
    {
        "id": "09606b2801a86d4a",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "Format for InfluxDB",
        "func": "// Assume msg.payload is a reading object\nlet reading = msg.payload;\n\nmsg.measurement = \"usage\";\nmsg.fields = {\n    kwh: reading.kwh\n};\nmsg.tags = {\n    meter_uid: reading.meter_uid\n};\nmsg.timestamp = new Date(reading.timestamp).getTime() * 1e6;  // nanoseconds\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1120,
        "wires": [
            [
                "7b941cb4b9efe7e0"
            ]
        ]
    },
    {
        "id": "2f96d529a8051d88",
        "type": "influxdb out",
        "z": "481f96d21d18f9be",
        "influxdb": "influxdb_connection",
        "name": "Write to InfluxDB",
        "measurement": "",
        "precision": "ns",
        "retentionPolicy": "",
        "database": "meters_electric",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1190,
        "y": 1200,
        "wires": []
    },
    {
        "id": "1b2c09b744cd29b5",
        "type": "debug",
        "z": "481f96d21d18f9be",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7b941cb4b9efe7e0",
        "type": "split",
        "z": "481f96d21d18f9be",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 990,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "bca597b1f0462ddb",
        "type": "inject",
        "z": "481f96d21d18f9be",
        "name": "Trigger Now",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 1440,
        "wires": [
            [
                "0de61c30cae561b3"
            ]
        ]
    },
    {
        "id": "0de61c30cae561b3",
        "type": "http request",
        "z": "481f96d21d18f9be",
        "name": "GET Intervals",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/intervals?meters=1857762",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 290,
        "y": 1440,
        "wires": [
            [
                "a4195e12da058c27"
            ]
        ]
    },
    {
        "id": "a4195e12da058c27",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "Extract Readings",
        "func": "const intervalData = msg.payload.intervals;\nif (!intervalData || intervalData.length === 0) {\n    node.warn(\"No interval blocks found\");\n    return null;\n}\n\nlet readings = [];\nintervalData.forEach(interval => {\n    if (interval.readings && interval.readings.length > 0) {\n        interval.readings.forEach(r => {\n            readings.push({\n                meter_uid: interval.meter_uid,\n                timestamp: r.start,\n                kwh: r.kwh\n            });\n        });\n    }\n});\n\nmsg.payload = readings;\nreturn msg;",
        "outputs": 1,
        "x": 480,
        "y": 1440,
        "wires": [
            [
                "f7d7814ce7259e58",
                "bf06c5a42e51e36e"
            ]
        ]
    },
    {
        "id": "ba14f7730a6051c1",
        "type": "split",
        "z": "481f96d21d18f9be",
        "name": "Split Readings",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 940,
        "y": 1440,
        "wires": [
            [
                "5dda163d96a3acdb"
            ]
        ]
    },
    {
        "id": "bf06c5a42e51e36e",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "Format for InfluxDB",
        "func": "// msg.payload is an array of readings before the split\n// Do nothing here – we’ll split it next\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1440,
        "wires": [
            [
                "ba14f7730a6051c1",
                "a7e81879dde8b282"
            ]
        ]
    },
    {
        "id": "eaecca70c2129fd6",
        "type": "influxdb out",
        "z": "481f96d21d18f9be",
        "influxdb": "30d90d31ffe1a670",
        "name": "Write 1857762 to Influx",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1190,
        "y": 1400,
        "wires": []
    },
    {
        "id": "5dda163d96a3acdb",
        "type": "function",
        "z": "481f96d21d18f9be",
        "name": "function 3",
        "func": "const reading = msg.payload;\n\nmsg.measurement = \"usage\";\n\nmsg.fields = {\n    kwh: parseFloat(reading.kwh)\n};\n\nmsg.tags = {\n    meter_uid: reading.meter_uid.toString()\n};\n\nmsg.timestamp = new Date(reading.timestamp).getTime() * 1e6;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1320,
        "wires": [
            [
                "1b2c09b744cd29b5",
                "eaecca70c2129fd6"
            ]
        ]
    },
    {
        "id": "inject_meter1",
        "type": "inject",
        "z": "flow_root",
        "name": "Fetch Intervals - Meter 1857755",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 100,
        "wires": [
            [
                "fetch_meter1_intervals"
            ]
        ]
    },
    {
        "id": "inject_meter2",
        "type": "inject",
        "z": "flow_root",
        "name": "Fetch Intervals - Meter 1857762",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "fetch_meter2_intervals"
            ]
        ]
    },
    {
        "id": "fetch_meter1_intervals",
        "type": "http request",
        "z": "flow_root",
        "name": "GET Intervals 1857755",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/meters/1857755/intervals",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "parse_intervals"
            ]
        ]
    },
    {
        "id": "fetch_meter2_intervals",
        "type": "http request",
        "z": "flow_root",
        "name": "GET Intervals 1857762",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://utilityapi.com/api/v2/meters/1857762/intervals",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Bearer 788d11a4b96f4651836af02015a39aaf"
            }
        ],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "parse_intervals",
                "c66100188d6a815a"
            ]
        ]
    },
    {
        "id": "parse_intervals",
        "type": "function",
        "z": "flow_root",
        "name": "Parse Interval Data",
        "func": "// Example format\n// msg.payload.intervals = [ {start: \"2025-04-09T00:00:00Z\", value: 1.23, duration: 3600}, ...]\n\nconst intervals = msg.payload.intervals;\nif (!intervals || intervals.length === 0) {\n    node.warn(\"No interval data found\");\n    return null;\n}\n\nlet results = intervals.map(i => {\n    return {\n        timestamp: i.start,\n        usage_kwh: i.value,\n        duration_sec: i.duration\n    };\n});\n\nmsg.payload = results;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 140,
        "wires": [
            [
                "debug_out"
            ]
        ]
    },
    {
        "id": "debug_out",
        "type": "debug",
        "z": "flow_root",
        "name": "Parsed Interval Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 140,
        "wires": []
    },
    {
        "id": "c66100188d6a815a",
        "type": "debug",
        "z": "flow_root",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 260,
        "wires": []
    }
]