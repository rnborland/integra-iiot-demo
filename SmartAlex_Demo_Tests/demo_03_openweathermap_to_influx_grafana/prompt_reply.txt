SmartAlex: Hi! I’m SmartAlex, your IIoT Systems Specialist. How can I help you today?

You: "I want to retrieve hourly weather data from OpenWeatherMap for a specific city and display temperature and humidity in Grafana. Use Node-RED and InfluxDB.

SmartAlex: To achieve this, you'll need to set up a flow in Node-RED that retrieves weather data from OpenWeatherMap, processes it, and writes it to InfluxDB. Then, you can visualize the data in Grafana. Here's a step-by-step guide: ### Step 1: Set Up OpenWeatherMap API 1. **Sign Up and Get an API Key:** Make sure you have an API key from OpenWeatherMap. If not, sign up at [OpenWeatherMap](https://openweathermap.org/) and obtain one. ### Step 2: Create a Node-RED Flow Here's how to create a flow to retrieve weather data: 1. **Inject Node:** Use this node to periodically trigger data retrieval. 2. **HTTP Request Node:** This node makes the API request to OpenWeatherMap. 3. **Function Node:** Process the response to extract the desired information: temperature and humidity. 4. **InfluxDB HTTP Request Node:** Write the processed data to InfluxDB. 5. **Debug Node:** Use this to verify data processing along the way. **Flow JSON to Import into Node-RED:** ```json [ { "id": "1", "type": "inject", "name": "Trigger Every Hour", "props": [], "repeat": "3600", "crontab": "", "once": true, "onceDelay": 0.1, "topic": "", "x": 140, "y": 120, "wires": [["2"]] }, { "id": "2", "type": "http request", "name": "Get Weather Data", "method": "GET", "ret": "obj", "url": "http://api.openweathermap.org/data/2.5/weather?q=YOUR_CITY&appid=YOUR_API_KEY&units=metric", "x": 320, "y": 120, "wires": [["3"]] }, { "id": "3", "type": "function", "name": "Prepare Data for InfluxDB", "func": "msg.method = \"POST\";\nmsg.headers = { \"Content-Type\": \"text/plain\" };\nmsg.payload = `weather,location=your_city temperature=${msg.payload.main.temp},humidity=${msg.payload.main.humidity}`;\nreturn msg;", "outputs": 1, "noerr": 0, "x": 540, "y": 120, "wires": [["4"]] }, { "id": "4", "type": "http request", "name": "Write to InfluxDB", "method": "POST", "ret": "txt", "paytoqs": "ignore", "url": "http://localhost:8086/write?db=weather", "tls": "", "persist": false, "proxy": "", "authType": "", "senderr": false, "x": 790, "y": 120, "wires": [["5"]] }, { "id": "5", "type": "debug", "name": "InfluxDB Response", "active": true, "tosidebar": true, "complete": "true", "x": 1010, "y": 120, "wires": [] } ] ``` - Replace `YOUR_CITY` and `YOUR_API_KEY` with your city and API credentials. - Adjust the location tag as needed in `Prepare Data for InfluxDB`. ### Step 3: Set Up InfluxDB 1. **Create the Database:** You’ll need to manually create the `weather` database in InfluxDB. ```bash influx CREATE DATABASE weather; ``` 2. **Verify the Database:** ```sql SHOW DATABASES; ``` ### Step 4: Visualize in Grafana 1. **Create a Grafana Data Source:** - Navigate to Configuration > Data Sources > Add new. - Select InfluxDB. - Configure with URL `http://localhost:8086` and Database `weather`. - Save and test the connection. 2. **Create a Time Series Panel:** - Open a new dashboard and add a panel. - Select the `weather` measurement. - Use the following query to display temperature and humidity: ```sql SELECT mean("temperature") AS "Temperature", mean("humidity") AS "Humidity" FROM "weather" WHERE "location" = 'your_city' AND $timeFilter GROUP BY time($__interval) fill(null) ``` - Adjust the panel settings: set visualization type to Time Series, and configure axis labels and units. ### Final Notes - **Testing:** Use the Debug node in Node-RED to verify that data is being written correctly to InfluxDB. - **Customization:** The flow can be customized by adjusting the Inject node’s interval and modifying Grafana's visualizations to suit your preferences. By following these steps, you will be able to display hourly temperature and humidity data from OpenWeatherMap in Grafana using your IIoT system.